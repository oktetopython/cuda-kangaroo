BaseField H, HH, I, J, S2, U2, V, X3, Y3, Z1Z1, Z3, gecc_optmp_1, r, t0, t1, t10, t11, t2, t3, t4, t5, t6, t7, t8, t9;
Z1Z1 = z.square();
U2 = o.x * Z1Z1;
t0 = z * Z1Z1;
S2 = o.y * t0;
H = (U2 + BaseField::pp() - x).reduce_to_pp();
HH = H.square();
gecc_optmp_1 = (HH + HH).reduce_to_pp();
I = (gecc_optmp_1 + gecc_optmp_1).reduce_to_pp();
J = H * I;
t1 = (S2 + BaseField::pp() - y).reduce_to_pp();
r = (t1 + t1).reduce_to_pp();
V = x * I;
t2 = r.square();
t3 = (V + V).reduce_to_pp();
t4 = (t2 + BaseField::pp() - J).reduce_to_pp();
X3 = (t4 + BaseField::pp() - t3).reduce_to_pp();
t5 = (V + BaseField::pp() - X3).reduce_to_pp();
t6 = y * J;
t7 = (t6 + t6).reduce_to_pp();
t8 = r * t5;
Y3 = (t8 + BaseField::pp() - t7).reduce_to_pp();
t9 = (z + H).reduce_to_pp();
t10 = t9.square();
t11 = (t10 + BaseField::pp() - Z1Z1).reduce_to_pp();
Z3 = (t11 + BaseField::pp() - HH).reduce_to_pp();
ECPointJacobian result;
result.x = X3.reduce_to_p();
result.y = Y3.reduce_to_p();
result.z = Z3.reduce_to_p();
return result;
