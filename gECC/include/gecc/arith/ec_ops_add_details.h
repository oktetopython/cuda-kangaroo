BaseField H, I, J, S1, S2, U1, U2, V, X3, Y3, Z1Z1, Z2Z2, Z3, r, t0, t1, t10, t11, t12, t13, t14, t2, t3, t4, t5, t6, t7, t8, t9;
Z1Z1 = z.square();
Z2Z2 = o.z.square();
U1 = x * Z2Z2;
U2 = o.x * Z1Z1;
t0 = o.z * Z2Z2;
S1 = y * t0;
t1 = z * Z1Z1;
S2 = o.y * t1;
H = (U2 + BaseField::pp() - U1).reduce_to_pp();
t2 = (H + H).reduce_to_pp();
I = t2.square();
J = H * I;
t3 = (S2 + BaseField::pp() - S1).reduce_to_pp();
r = (t3 + t3).reduce_to_pp();
V = U1 * I;
t4 = r.square();
t5 = (V + V).reduce_to_pp();
t6 = (t4 + BaseField::pp() - J).reduce_to_pp();
X3 = (t6 + BaseField::pp() - t5).reduce_to_pp();
t7 = (V + BaseField::pp() - X3).reduce_to_pp();
t8 = S1 * J;
t9 = (t8 + t8).reduce_to_pp();
t10 = r * t7;
Y3 = (t10 + BaseField::pp() - t9).reduce_to_pp();
t11 = (z + o.z).reduce_to_pp();
t12 = t11.square();
t13 = (t12 + BaseField::pp() - Z1Z1).reduce_to_pp();
t14 = (t13 + BaseField::pp() - Z2Z2).reduce_to_pp();
Z3 = t14 * H;
ECPointJacobian result;
result.x = X3.reduce_to_p();
result.y = Y3.reduce_to_p();
result.z = Z3.reduce_to_p();
return result;
