template <> struct CC<DigitT<u64, 64>, 1> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[1], const Base a[1], const Base b[1]) { Base cy; asm("add.cc.u64 %0, %2, %3;\n\t""addc.u64 %1, 0, 0;" : "=l"(c[0]),"=l"(cy) : "l"(a[0]),"l"(b[0]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[1], const Base a[1], Base b) { Base cy; asm("add.cc.u64 %0, %2, %3;\n\t""addc.u64 %1, 0, 0;" : "=l"(c[0]),"=l"(cy) : "l"(a[0]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[1], const Base a[1], const Base b[1]) { Base br; asm("sub.cc.u64 %0, %2, %3;\n\t""subc.u64 %1, 0, 0;" : "=l"(c[0]),"=l"(br) : "l"(a[0]),"l"(b[0]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[1], const Base a[1], Base b) { Base br; asm("sub.cc.u64 %0, %2, %3;\n\t""subc.u64 %1, 0, 0;" : "=l"(c[0]),"=l"(br) : "l"(a[0]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 2> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[2], const Base a[2], const Base b[2]) { Base cy; asm("add.cc.u64 %0, %3, %5;\n\t""addc.cc.u64 %1, %4, %6;\n\t""addc.u64 %2, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(b[0]),"l"(b[1]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[2], const Base a[2], Base b) { Base cy; asm("add.cc.u64 %0, %3, %5;\n\t""addc.cc.u64 %1, %4, 0;\n\t""addc.u64 %2, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[2], const Base a[2], const Base b[2]) { Base br; asm("sub.cc.u64 %0, %3, %5;\n\t""subc.cc.u64 %1, %4, %6;\n\t""subc.u64 %2, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(b[0]),"l"(b[1]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[2], const Base a[2], Base b) { Base br; asm("sub.cc.u64 %0, %3, %5;\n\t""subc.cc.u64 %1, %4, 0;\n\t""subc.u64 %2, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 3> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[3], const Base a[3], const Base b[3]) { Base cy; asm("add.cc.u64 %0, %4, %7;\n\t""addc.cc.u64 %1, %5, %8;\n\t""addc.cc.u64 %2, %6, %9;\n\t""addc.u64 %3, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(b[0]),"l"(b[1]),"l"(b[2]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[3], const Base a[3], Base b) { Base cy; asm("add.cc.u64 %0, %4, %7;\n\t""addc.cc.u64 %1, %5, 0;\n\t""addc.cc.u64 %2, %6, 0;\n\t""addc.u64 %3, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[3], const Base a[3], const Base b[3]) { Base br; asm("sub.cc.u64 %0, %4, %7;\n\t""subc.cc.u64 %1, %5, %8;\n\t""subc.cc.u64 %2, %6, %9;\n\t""subc.u64 %3, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(b[0]),"l"(b[1]),"l"(b[2]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[3], const Base a[3], Base b) { Base br; asm("sub.cc.u64 %0, %4, %7;\n\t""subc.cc.u64 %1, %5, 0;\n\t""subc.cc.u64 %2, %6, 0;\n\t""subc.u64 %3, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 4> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[4], const Base a[4], const Base b[4]) { Base cy; asm("add.cc.u64 %0, %5, %9;\n\t""addc.cc.u64 %1, %6, %10;\n\t""addc.cc.u64 %2, %7, %11;\n\t""addc.cc.u64 %3, %8, %12;\n\t""addc.u64 %4, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[4], const Base a[4], Base b) { Base cy; asm("add.cc.u64 %0, %5, %9;\n\t""addc.cc.u64 %1, %6, 0;\n\t""addc.cc.u64 %2, %7, 0;\n\t""addc.cc.u64 %3, %8, 0;\n\t""addc.u64 %4, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[4], const Base a[4], const Base b[4]) { Base br; asm("sub.cc.u64 %0, %5, %9;\n\t""subc.cc.u64 %1, %6, %10;\n\t""subc.cc.u64 %2, %7, %11;\n\t""subc.cc.u64 %3, %8, %12;\n\t""subc.u64 %4, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[4], const Base a[4], Base b) { Base br; asm("sub.cc.u64 %0, %5, %9;\n\t""subc.cc.u64 %1, %6, 0;\n\t""subc.cc.u64 %2, %7, 0;\n\t""subc.cc.u64 %3, %8, 0;\n\t""subc.u64 %4, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 5> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[5], const Base a[5], const Base b[5]) { Base cy; asm("add.cc.u64 %0, %6, %11;\n\t""addc.cc.u64 %1, %7, %12;\n\t""addc.cc.u64 %2, %8, %13;\n\t""addc.cc.u64 %3, %9, %14;\n\t""addc.cc.u64 %4, %10, %15;\n\t""addc.u64 %5, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[5], const Base a[5], Base b) { Base cy; asm("add.cc.u64 %0, %6, %11;\n\t""addc.cc.u64 %1, %7, 0;\n\t""addc.cc.u64 %2, %8, 0;\n\t""addc.cc.u64 %3, %9, 0;\n\t""addc.cc.u64 %4, %10, 0;\n\t""addc.u64 %5, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[5], const Base a[5], const Base b[5]) { Base br; asm("sub.cc.u64 %0, %6, %11;\n\t""subc.cc.u64 %1, %7, %12;\n\t""subc.cc.u64 %2, %8, %13;\n\t""subc.cc.u64 %3, %9, %14;\n\t""subc.cc.u64 %4, %10, %15;\n\t""subc.u64 %5, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[5], const Base a[5], Base b) { Base br; asm("sub.cc.u64 %0, %6, %11;\n\t""subc.cc.u64 %1, %7, 0;\n\t""subc.cc.u64 %2, %8, 0;\n\t""subc.cc.u64 %3, %9, 0;\n\t""subc.cc.u64 %4, %10, 0;\n\t""subc.u64 %5, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 6> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[6], const Base a[6], const Base b[6]) { Base cy; asm("add.cc.u64 %0, %7, %13;\n\t""addc.cc.u64 %1, %8, %14;\n\t""addc.cc.u64 %2, %9, %15;\n\t""addc.cc.u64 %3, %10, %16;\n\t""addc.cc.u64 %4, %11, %17;\n\t""addc.cc.u64 %5, %12, %18;\n\t""addc.u64 %6, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[6], const Base a[6], Base b) { Base cy; asm("add.cc.u64 %0, %7, %13;\n\t""addc.cc.u64 %1, %8, 0;\n\t""addc.cc.u64 %2, %9, 0;\n\t""addc.cc.u64 %3, %10, 0;\n\t""addc.cc.u64 %4, %11, 0;\n\t""addc.cc.u64 %5, %12, 0;\n\t""addc.u64 %6, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[6], const Base a[6], const Base b[6]) { Base br; asm("sub.cc.u64 %0, %7, %13;\n\t""subc.cc.u64 %1, %8, %14;\n\t""subc.cc.u64 %2, %9, %15;\n\t""subc.cc.u64 %3, %10, %16;\n\t""subc.cc.u64 %4, %11, %17;\n\t""subc.cc.u64 %5, %12, %18;\n\t""subc.u64 %6, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[6], const Base a[6], Base b) { Base br; asm("sub.cc.u64 %0, %7, %13;\n\t""subc.cc.u64 %1, %8, 0;\n\t""subc.cc.u64 %2, %9, 0;\n\t""subc.cc.u64 %3, %10, 0;\n\t""subc.cc.u64 %4, %11, 0;\n\t""subc.cc.u64 %5, %12, 0;\n\t""subc.u64 %6, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 7> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[7], const Base a[7], const Base b[7]) { Base cy; asm("add.cc.u64 %0, %8, %15;\n\t""addc.cc.u64 %1, %9, %16;\n\t""addc.cc.u64 %2, %10, %17;\n\t""addc.cc.u64 %3, %11, %18;\n\t""addc.cc.u64 %4, %12, %19;\n\t""addc.cc.u64 %5, %13, %20;\n\t""addc.cc.u64 %6, %14, %21;\n\t""addc.u64 %7, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[7], const Base a[7], Base b) { Base cy; asm("add.cc.u64 %0, %8, %15;\n\t""addc.cc.u64 %1, %9, 0;\n\t""addc.cc.u64 %2, %10, 0;\n\t""addc.cc.u64 %3, %11, 0;\n\t""addc.cc.u64 %4, %12, 0;\n\t""addc.cc.u64 %5, %13, 0;\n\t""addc.cc.u64 %6, %14, 0;\n\t""addc.u64 %7, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[7], const Base a[7], const Base b[7]) { Base br; asm("sub.cc.u64 %0, %8, %15;\n\t""subc.cc.u64 %1, %9, %16;\n\t""subc.cc.u64 %2, %10, %17;\n\t""subc.cc.u64 %3, %11, %18;\n\t""subc.cc.u64 %4, %12, %19;\n\t""subc.cc.u64 %5, %13, %20;\n\t""subc.cc.u64 %6, %14, %21;\n\t""subc.u64 %7, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[7], const Base a[7], Base b) { Base br; asm("sub.cc.u64 %0, %8, %15;\n\t""subc.cc.u64 %1, %9, 0;\n\t""subc.cc.u64 %2, %10, 0;\n\t""subc.cc.u64 %3, %11, 0;\n\t""subc.cc.u64 %4, %12, 0;\n\t""subc.cc.u64 %5, %13, 0;\n\t""subc.cc.u64 %6, %14, 0;\n\t""subc.u64 %7, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 8> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[8], const Base a[8], const Base b[8]) { Base cy; asm("add.cc.u64 %0, %9, %17;\n\t""addc.cc.u64 %1, %10, %18;\n\t""addc.cc.u64 %2, %11, %19;\n\t""addc.cc.u64 %3, %12, %20;\n\t""addc.cc.u64 %4, %13, %21;\n\t""addc.cc.u64 %5, %14, %22;\n\t""addc.cc.u64 %6, %15, %23;\n\t""addc.cc.u64 %7, %16, %24;\n\t""addc.u64 %8, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[8], const Base a[8], Base b) { Base cy; asm("add.cc.u64 %0, %9, %17;\n\t""addc.cc.u64 %1, %10, 0;\n\t""addc.cc.u64 %2, %11, 0;\n\t""addc.cc.u64 %3, %12, 0;\n\t""addc.cc.u64 %4, %13, 0;\n\t""addc.cc.u64 %5, %14, 0;\n\t""addc.cc.u64 %6, %15, 0;\n\t""addc.cc.u64 %7, %16, 0;\n\t""addc.u64 %8, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[8], const Base a[8], const Base b[8]) { Base br; asm("sub.cc.u64 %0, %9, %17;\n\t""subc.cc.u64 %1, %10, %18;\n\t""subc.cc.u64 %2, %11, %19;\n\t""subc.cc.u64 %3, %12, %20;\n\t""subc.cc.u64 %4, %13, %21;\n\t""subc.cc.u64 %5, %14, %22;\n\t""subc.cc.u64 %6, %15, %23;\n\t""subc.cc.u64 %7, %16, %24;\n\t""subc.u64 %8, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[8], const Base a[8], Base b) { Base br; asm("sub.cc.u64 %0, %9, %17;\n\t""subc.cc.u64 %1, %10, 0;\n\t""subc.cc.u64 %2, %11, 0;\n\t""subc.cc.u64 %3, %12, 0;\n\t""subc.cc.u64 %4, %13, 0;\n\t""subc.cc.u64 %5, %14, 0;\n\t""subc.cc.u64 %6, %15, 0;\n\t""subc.cc.u64 %7, %16, 0;\n\t""subc.u64 %8, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 9> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[9], const Base a[9], const Base b[9]) { Base cy; asm("add.cc.u64 %0, %10, %19;\n\t""addc.cc.u64 %1, %11, %20;\n\t""addc.cc.u64 %2, %12, %21;\n\t""addc.cc.u64 %3, %13, %22;\n\t""addc.cc.u64 %4, %14, %23;\n\t""addc.cc.u64 %5, %15, %24;\n\t""addc.cc.u64 %6, %16, %25;\n\t""addc.cc.u64 %7, %17, %26;\n\t""addc.cc.u64 %8, %18, %27;\n\t""addc.u64 %9, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[9], const Base a[9], Base b) { Base cy; asm("add.cc.u64 %0, %10, %19;\n\t""addc.cc.u64 %1, %11, 0;\n\t""addc.cc.u64 %2, %12, 0;\n\t""addc.cc.u64 %3, %13, 0;\n\t""addc.cc.u64 %4, %14, 0;\n\t""addc.cc.u64 %5, %15, 0;\n\t""addc.cc.u64 %6, %16, 0;\n\t""addc.cc.u64 %7, %17, 0;\n\t""addc.cc.u64 %8, %18, 0;\n\t""addc.u64 %9, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[9], const Base a[9], const Base b[9]) { Base br; asm("sub.cc.u64 %0, %10, %19;\n\t""subc.cc.u64 %1, %11, %20;\n\t""subc.cc.u64 %2, %12, %21;\n\t""subc.cc.u64 %3, %13, %22;\n\t""subc.cc.u64 %4, %14, %23;\n\t""subc.cc.u64 %5, %15, %24;\n\t""subc.cc.u64 %6, %16, %25;\n\t""subc.cc.u64 %7, %17, %26;\n\t""subc.cc.u64 %8, %18, %27;\n\t""subc.u64 %9, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[9], const Base a[9], Base b) { Base br; asm("sub.cc.u64 %0, %10, %19;\n\t""subc.cc.u64 %1, %11, 0;\n\t""subc.cc.u64 %2, %12, 0;\n\t""subc.cc.u64 %3, %13, 0;\n\t""subc.cc.u64 %4, %14, 0;\n\t""subc.cc.u64 %5, %15, 0;\n\t""subc.cc.u64 %6, %16, 0;\n\t""subc.cc.u64 %7, %17, 0;\n\t""subc.cc.u64 %8, %18, 0;\n\t""subc.u64 %9, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 10> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[10], const Base a[10], const Base b[10]) { Base cy; asm("add.cc.u64 %0, %11, %21;\n\t""addc.cc.u64 %1, %12, %22;\n\t""addc.cc.u64 %2, %13, %23;\n\t""addc.cc.u64 %3, %14, %24;\n\t""addc.cc.u64 %4, %15, %25;\n\t""addc.cc.u64 %5, %16, %26;\n\t""addc.cc.u64 %6, %17, %27;\n\t""addc.cc.u64 %7, %18, %28;\n\t""addc.cc.u64 %8, %19, %29;\n\t""addc.cc.u64 %9, %20, %30;\n\t""addc.u64 %10, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[10], const Base a[10], Base b) { Base cy; asm("add.cc.u64 %0, %11, %21;\n\t""addc.cc.u64 %1, %12, 0;\n\t""addc.cc.u64 %2, %13, 0;\n\t""addc.cc.u64 %3, %14, 0;\n\t""addc.cc.u64 %4, %15, 0;\n\t""addc.cc.u64 %5, %16, 0;\n\t""addc.cc.u64 %6, %17, 0;\n\t""addc.cc.u64 %7, %18, 0;\n\t""addc.cc.u64 %8, %19, 0;\n\t""addc.cc.u64 %9, %20, 0;\n\t""addc.u64 %10, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[10], const Base a[10], const Base b[10]) { Base br; asm("sub.cc.u64 %0, %11, %21;\n\t""subc.cc.u64 %1, %12, %22;\n\t""subc.cc.u64 %2, %13, %23;\n\t""subc.cc.u64 %3, %14, %24;\n\t""subc.cc.u64 %4, %15, %25;\n\t""subc.cc.u64 %5, %16, %26;\n\t""subc.cc.u64 %6, %17, %27;\n\t""subc.cc.u64 %7, %18, %28;\n\t""subc.cc.u64 %8, %19, %29;\n\t""subc.cc.u64 %9, %20, %30;\n\t""subc.u64 %10, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[10], const Base a[10], Base b) { Base br; asm("sub.cc.u64 %0, %11, %21;\n\t""subc.cc.u64 %1, %12, 0;\n\t""subc.cc.u64 %2, %13, 0;\n\t""subc.cc.u64 %3, %14, 0;\n\t""subc.cc.u64 %4, %15, 0;\n\t""subc.cc.u64 %5, %16, 0;\n\t""subc.cc.u64 %6, %17, 0;\n\t""subc.cc.u64 %7, %18, 0;\n\t""subc.cc.u64 %8, %19, 0;\n\t""subc.cc.u64 %9, %20, 0;\n\t""subc.u64 %10, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 11> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[11], const Base a[11], const Base b[11]) { Base cy; asm("add.cc.u64 %0, %12, %23;\n\t""addc.cc.u64 %1, %13, %24;\n\t""addc.cc.u64 %2, %14, %25;\n\t""addc.cc.u64 %3, %15, %26;\n\t""addc.cc.u64 %4, %16, %27;\n\t""addc.cc.u64 %5, %17, %28;\n\t""addc.cc.u64 %6, %18, %29;\n\t""addc.cc.u64 %7, %19, %30;\n\t""addc.cc.u64 %8, %20, %31;\n\t""addc.cc.u64 %9, %21, %32;\n\t""addc.cc.u64 %10, %22, %33;\n\t""addc.u64 %11, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[11], const Base a[11], Base b) { Base cy; asm("add.cc.u64 %0, %12, %23;\n\t""addc.cc.u64 %1, %13, 0;\n\t""addc.cc.u64 %2, %14, 0;\n\t""addc.cc.u64 %3, %15, 0;\n\t""addc.cc.u64 %4, %16, 0;\n\t""addc.cc.u64 %5, %17, 0;\n\t""addc.cc.u64 %6, %18, 0;\n\t""addc.cc.u64 %7, %19, 0;\n\t""addc.cc.u64 %8, %20, 0;\n\t""addc.cc.u64 %9, %21, 0;\n\t""addc.cc.u64 %10, %22, 0;\n\t""addc.u64 %11, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[11], const Base a[11], const Base b[11]) { Base br; asm("sub.cc.u64 %0, %12, %23;\n\t""subc.cc.u64 %1, %13, %24;\n\t""subc.cc.u64 %2, %14, %25;\n\t""subc.cc.u64 %3, %15, %26;\n\t""subc.cc.u64 %4, %16, %27;\n\t""subc.cc.u64 %5, %17, %28;\n\t""subc.cc.u64 %6, %18, %29;\n\t""subc.cc.u64 %7, %19, %30;\n\t""subc.cc.u64 %8, %20, %31;\n\t""subc.cc.u64 %9, %21, %32;\n\t""subc.cc.u64 %10, %22, %33;\n\t""subc.u64 %11, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[11], const Base a[11], Base b) { Base br; asm("sub.cc.u64 %0, %12, %23;\n\t""subc.cc.u64 %1, %13, 0;\n\t""subc.cc.u64 %2, %14, 0;\n\t""subc.cc.u64 %3, %15, 0;\n\t""subc.cc.u64 %4, %16, 0;\n\t""subc.cc.u64 %5, %17, 0;\n\t""subc.cc.u64 %6, %18, 0;\n\t""subc.cc.u64 %7, %19, 0;\n\t""subc.cc.u64 %8, %20, 0;\n\t""subc.cc.u64 %9, %21, 0;\n\t""subc.cc.u64 %10, %22, 0;\n\t""subc.u64 %11, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 12> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[12], const Base a[12], const Base b[12]) { Base cy; asm("add.cc.u64 %0, %13, %25;\n\t""addc.cc.u64 %1, %14, %26;\n\t""addc.cc.u64 %2, %15, %27;\n\t""addc.cc.u64 %3, %16, %28;\n\t""addc.cc.u64 %4, %17, %29;\n\t""addc.cc.u64 %5, %18, %30;\n\t""addc.cc.u64 %6, %19, %31;\n\t""addc.cc.u64 %7, %20, %32;\n\t""addc.cc.u64 %8, %21, %33;\n\t""addc.cc.u64 %9, %22, %34;\n\t""addc.cc.u64 %10, %23, %35;\n\t""addc.cc.u64 %11, %24, %36;\n\t""addc.u64 %12, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[12], const Base a[12], Base b) { Base cy; asm("add.cc.u64 %0, %13, %25;\n\t""addc.cc.u64 %1, %14, 0;\n\t""addc.cc.u64 %2, %15, 0;\n\t""addc.cc.u64 %3, %16, 0;\n\t""addc.cc.u64 %4, %17, 0;\n\t""addc.cc.u64 %5, %18, 0;\n\t""addc.cc.u64 %6, %19, 0;\n\t""addc.cc.u64 %7, %20, 0;\n\t""addc.cc.u64 %8, %21, 0;\n\t""addc.cc.u64 %9, %22, 0;\n\t""addc.cc.u64 %10, %23, 0;\n\t""addc.cc.u64 %11, %24, 0;\n\t""addc.u64 %12, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[12], const Base a[12], const Base b[12]) { Base br; asm("sub.cc.u64 %0, %13, %25;\n\t""subc.cc.u64 %1, %14, %26;\n\t""subc.cc.u64 %2, %15, %27;\n\t""subc.cc.u64 %3, %16, %28;\n\t""subc.cc.u64 %4, %17, %29;\n\t""subc.cc.u64 %5, %18, %30;\n\t""subc.cc.u64 %6, %19, %31;\n\t""subc.cc.u64 %7, %20, %32;\n\t""subc.cc.u64 %8, %21, %33;\n\t""subc.cc.u64 %9, %22, %34;\n\t""subc.cc.u64 %10, %23, %35;\n\t""subc.cc.u64 %11, %24, %36;\n\t""subc.u64 %12, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[12], const Base a[12], Base b) { Base br; asm("sub.cc.u64 %0, %13, %25;\n\t""subc.cc.u64 %1, %14, 0;\n\t""subc.cc.u64 %2, %15, 0;\n\t""subc.cc.u64 %3, %16, 0;\n\t""subc.cc.u64 %4, %17, 0;\n\t""subc.cc.u64 %5, %18, 0;\n\t""subc.cc.u64 %6, %19, 0;\n\t""subc.cc.u64 %7, %20, 0;\n\t""subc.cc.u64 %8, %21, 0;\n\t""subc.cc.u64 %9, %22, 0;\n\t""subc.cc.u64 %10, %23, 0;\n\t""subc.cc.u64 %11, %24, 0;\n\t""subc.u64 %12, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 13> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[13], const Base a[13], const Base b[13]) { Base cy; asm("add.cc.u64 %0, %14, %27;\n\t""addc.cc.u64 %1, %15, %28;\n\t""addc.cc.u64 %2, %16, %29;\n\t""addc.cc.u64 %3, %17, %30;\n\t""addc.cc.u64 %4, %18, %31;\n\t""addc.cc.u64 %5, %19, %32;\n\t""addc.cc.u64 %6, %20, %33;\n\t""addc.cc.u64 %7, %21, %34;\n\t""addc.cc.u64 %8, %22, %35;\n\t""addc.cc.u64 %9, %23, %36;\n\t""addc.cc.u64 %10, %24, %37;\n\t""addc.cc.u64 %11, %25, %38;\n\t""addc.cc.u64 %12, %26, %39;\n\t""addc.u64 %13, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[13], const Base a[13], Base b) { Base cy; asm("add.cc.u64 %0, %14, %27;\n\t""addc.cc.u64 %1, %15, 0;\n\t""addc.cc.u64 %2, %16, 0;\n\t""addc.cc.u64 %3, %17, 0;\n\t""addc.cc.u64 %4, %18, 0;\n\t""addc.cc.u64 %5, %19, 0;\n\t""addc.cc.u64 %6, %20, 0;\n\t""addc.cc.u64 %7, %21, 0;\n\t""addc.cc.u64 %8, %22, 0;\n\t""addc.cc.u64 %9, %23, 0;\n\t""addc.cc.u64 %10, %24, 0;\n\t""addc.cc.u64 %11, %25, 0;\n\t""addc.cc.u64 %12, %26, 0;\n\t""addc.u64 %13, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[13], const Base a[13], const Base b[13]) { Base br; asm("sub.cc.u64 %0, %14, %27;\n\t""subc.cc.u64 %1, %15, %28;\n\t""subc.cc.u64 %2, %16, %29;\n\t""subc.cc.u64 %3, %17, %30;\n\t""subc.cc.u64 %4, %18, %31;\n\t""subc.cc.u64 %5, %19, %32;\n\t""subc.cc.u64 %6, %20, %33;\n\t""subc.cc.u64 %7, %21, %34;\n\t""subc.cc.u64 %8, %22, %35;\n\t""subc.cc.u64 %9, %23, %36;\n\t""subc.cc.u64 %10, %24, %37;\n\t""subc.cc.u64 %11, %25, %38;\n\t""subc.cc.u64 %12, %26, %39;\n\t""subc.u64 %13, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[13], const Base a[13], Base b) { Base br; asm("sub.cc.u64 %0, %14, %27;\n\t""subc.cc.u64 %1, %15, 0;\n\t""subc.cc.u64 %2, %16, 0;\n\t""subc.cc.u64 %3, %17, 0;\n\t""subc.cc.u64 %4, %18, 0;\n\t""subc.cc.u64 %5, %19, 0;\n\t""subc.cc.u64 %6, %20, 0;\n\t""subc.cc.u64 %7, %21, 0;\n\t""subc.cc.u64 %8, %22, 0;\n\t""subc.cc.u64 %9, %23, 0;\n\t""subc.cc.u64 %10, %24, 0;\n\t""subc.cc.u64 %11, %25, 0;\n\t""subc.cc.u64 %12, %26, 0;\n\t""subc.u64 %13, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 14> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[14], const Base a[14], const Base b[14]) { Base cy; asm("add.cc.u64 %0, %15, %29;\n\t""addc.cc.u64 %1, %16, %30;\n\t""addc.cc.u64 %2, %17, %31;\n\t""addc.cc.u64 %3, %18, %32;\n\t""addc.cc.u64 %4, %19, %33;\n\t""addc.cc.u64 %5, %20, %34;\n\t""addc.cc.u64 %6, %21, %35;\n\t""addc.cc.u64 %7, %22, %36;\n\t""addc.cc.u64 %8, %23, %37;\n\t""addc.cc.u64 %9, %24, %38;\n\t""addc.cc.u64 %10, %25, %39;\n\t""addc.cc.u64 %11, %26, %40;\n\t""addc.cc.u64 %12, %27, %41;\n\t""addc.cc.u64 %13, %28, %42;\n\t""addc.u64 %14, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[14], const Base a[14], Base b) { Base cy; asm("add.cc.u64 %0, %15, %29;\n\t""addc.cc.u64 %1, %16, 0;\n\t""addc.cc.u64 %2, %17, 0;\n\t""addc.cc.u64 %3, %18, 0;\n\t""addc.cc.u64 %4, %19, 0;\n\t""addc.cc.u64 %5, %20, 0;\n\t""addc.cc.u64 %6, %21, 0;\n\t""addc.cc.u64 %7, %22, 0;\n\t""addc.cc.u64 %8, %23, 0;\n\t""addc.cc.u64 %9, %24, 0;\n\t""addc.cc.u64 %10, %25, 0;\n\t""addc.cc.u64 %11, %26, 0;\n\t""addc.cc.u64 %12, %27, 0;\n\t""addc.cc.u64 %13, %28, 0;\n\t""addc.u64 %14, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[14], const Base a[14], const Base b[14]) { Base br; asm("sub.cc.u64 %0, %15, %29;\n\t""subc.cc.u64 %1, %16, %30;\n\t""subc.cc.u64 %2, %17, %31;\n\t""subc.cc.u64 %3, %18, %32;\n\t""subc.cc.u64 %4, %19, %33;\n\t""subc.cc.u64 %5, %20, %34;\n\t""subc.cc.u64 %6, %21, %35;\n\t""subc.cc.u64 %7, %22, %36;\n\t""subc.cc.u64 %8, %23, %37;\n\t""subc.cc.u64 %9, %24, %38;\n\t""subc.cc.u64 %10, %25, %39;\n\t""subc.cc.u64 %11, %26, %40;\n\t""subc.cc.u64 %12, %27, %41;\n\t""subc.cc.u64 %13, %28, %42;\n\t""subc.u64 %14, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[14], const Base a[14], Base b) { Base br; asm("sub.cc.u64 %0, %15, %29;\n\t""subc.cc.u64 %1, %16, 0;\n\t""subc.cc.u64 %2, %17, 0;\n\t""subc.cc.u64 %3, %18, 0;\n\t""subc.cc.u64 %4, %19, 0;\n\t""subc.cc.u64 %5, %20, 0;\n\t""subc.cc.u64 %6, %21, 0;\n\t""subc.cc.u64 %7, %22, 0;\n\t""subc.cc.u64 %8, %23, 0;\n\t""subc.cc.u64 %9, %24, 0;\n\t""subc.cc.u64 %10, %25, 0;\n\t""subc.cc.u64 %11, %26, 0;\n\t""subc.cc.u64 %12, %27, 0;\n\t""subc.cc.u64 %13, %28, 0;\n\t""subc.u64 %14, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 15> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[15], const Base a[15], const Base b[15]) { Base cy; asm("add.cc.u64 %0, %16, %31;\n\t""addc.cc.u64 %1, %17, %32;\n\t""addc.cc.u64 %2, %18, %33;\n\t""addc.cc.u64 %3, %19, %34;\n\t""addc.cc.u64 %4, %20, %35;\n\t""addc.cc.u64 %5, %21, %36;\n\t""addc.cc.u64 %6, %22, %37;\n\t""addc.cc.u64 %7, %23, %38;\n\t""addc.cc.u64 %8, %24, %39;\n\t""addc.cc.u64 %9, %25, %40;\n\t""addc.cc.u64 %10, %26, %41;\n\t""addc.cc.u64 %11, %27, %42;\n\t""addc.cc.u64 %12, %28, %43;\n\t""addc.cc.u64 %13, %29, %44;\n\t""addc.cc.u64 %14, %30, %45;\n\t""addc.u64 %15, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]),"l"(b[14]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[15], const Base a[15], Base b) { Base cy; asm("add.cc.u64 %0, %16, %31;\n\t""addc.cc.u64 %1, %17, 0;\n\t""addc.cc.u64 %2, %18, 0;\n\t""addc.cc.u64 %3, %19, 0;\n\t""addc.cc.u64 %4, %20, 0;\n\t""addc.cc.u64 %5, %21, 0;\n\t""addc.cc.u64 %6, %22, 0;\n\t""addc.cc.u64 %7, %23, 0;\n\t""addc.cc.u64 %8, %24, 0;\n\t""addc.cc.u64 %9, %25, 0;\n\t""addc.cc.u64 %10, %26, 0;\n\t""addc.cc.u64 %11, %27, 0;\n\t""addc.cc.u64 %12, %28, 0;\n\t""addc.cc.u64 %13, %29, 0;\n\t""addc.cc.u64 %14, %30, 0;\n\t""addc.u64 %15, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[15], const Base a[15], const Base b[15]) { Base br; asm("sub.cc.u64 %0, %16, %31;\n\t""subc.cc.u64 %1, %17, %32;\n\t""subc.cc.u64 %2, %18, %33;\n\t""subc.cc.u64 %3, %19, %34;\n\t""subc.cc.u64 %4, %20, %35;\n\t""subc.cc.u64 %5, %21, %36;\n\t""subc.cc.u64 %6, %22, %37;\n\t""subc.cc.u64 %7, %23, %38;\n\t""subc.cc.u64 %8, %24, %39;\n\t""subc.cc.u64 %9, %25, %40;\n\t""subc.cc.u64 %10, %26, %41;\n\t""subc.cc.u64 %11, %27, %42;\n\t""subc.cc.u64 %12, %28, %43;\n\t""subc.cc.u64 %13, %29, %44;\n\t""subc.cc.u64 %14, %30, %45;\n\t""subc.u64 %15, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]),"l"(b[14]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[15], const Base a[15], Base b) { Base br; asm("sub.cc.u64 %0, %16, %31;\n\t""subc.cc.u64 %1, %17, 0;\n\t""subc.cc.u64 %2, %18, 0;\n\t""subc.cc.u64 %3, %19, 0;\n\t""subc.cc.u64 %4, %20, 0;\n\t""subc.cc.u64 %5, %21, 0;\n\t""subc.cc.u64 %6, %22, 0;\n\t""subc.cc.u64 %7, %23, 0;\n\t""subc.cc.u64 %8, %24, 0;\n\t""subc.cc.u64 %9, %25, 0;\n\t""subc.cc.u64 %10, %26, 0;\n\t""subc.cc.u64 %11, %27, 0;\n\t""subc.cc.u64 %12, %28, 0;\n\t""subc.cc.u64 %13, %29, 0;\n\t""subc.cc.u64 %14, %30, 0;\n\t""subc.u64 %15, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u64, 64>, 16> { using Base = typename DigitT<u64, 64>::Base; __device__ __forceinline__ static Base add_cy(Base c[16], const Base a[16], const Base b[16]) { Base cy; asm("add.cc.u64 %0, %17, %33;\n\t""addc.cc.u64 %1, %18, %34;\n\t""addc.cc.u64 %2, %19, %35;\n\t""addc.cc.u64 %3, %20, %36;\n\t""addc.cc.u64 %4, %21, %37;\n\t""addc.cc.u64 %5, %22, %38;\n\t""addc.cc.u64 %6, %23, %39;\n\t""addc.cc.u64 %7, %24, %40;\n\t""addc.cc.u64 %8, %25, %41;\n\t""addc.cc.u64 %9, %26, %42;\n\t""addc.cc.u64 %10, %27, %43;\n\t""addc.cc.u64 %11, %28, %44;\n\t""addc.cc.u64 %12, %29, %45;\n\t""addc.cc.u64 %13, %30, %46;\n\t""addc.cc.u64 %14, %31, %47;\n\t""addc.cc.u64 %15, %32, %48;\n\t""addc.u64 %16, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(c[15]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(a[15]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]),"l"(b[14]),"l"(b[15]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[16], const Base a[16], Base b) { Base cy; asm("add.cc.u64 %0, %17, %33;\n\t""addc.cc.u64 %1, %18, 0;\n\t""addc.cc.u64 %2, %19, 0;\n\t""addc.cc.u64 %3, %20, 0;\n\t""addc.cc.u64 %4, %21, 0;\n\t""addc.cc.u64 %5, %22, 0;\n\t""addc.cc.u64 %6, %23, 0;\n\t""addc.cc.u64 %7, %24, 0;\n\t""addc.cc.u64 %8, %25, 0;\n\t""addc.cc.u64 %9, %26, 0;\n\t""addc.cc.u64 %10, %27, 0;\n\t""addc.cc.u64 %11, %28, 0;\n\t""addc.cc.u64 %12, %29, 0;\n\t""addc.cc.u64 %13, %30, 0;\n\t""addc.cc.u64 %14, %31, 0;\n\t""addc.cc.u64 %15, %32, 0;\n\t""addc.u64 %16, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(c[15]),"=l"(cy) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(a[15]),"l"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[16], const Base a[16], const Base b[16]) { Base br; asm("sub.cc.u64 %0, %17, %33;\n\t""subc.cc.u64 %1, %18, %34;\n\t""subc.cc.u64 %2, %19, %35;\n\t""subc.cc.u64 %3, %20, %36;\n\t""subc.cc.u64 %4, %21, %37;\n\t""subc.cc.u64 %5, %22, %38;\n\t""subc.cc.u64 %6, %23, %39;\n\t""subc.cc.u64 %7, %24, %40;\n\t""subc.cc.u64 %8, %25, %41;\n\t""subc.cc.u64 %9, %26, %42;\n\t""subc.cc.u64 %10, %27, %43;\n\t""subc.cc.u64 %11, %28, %44;\n\t""subc.cc.u64 %12, %29, %45;\n\t""subc.cc.u64 %13, %30, %46;\n\t""subc.cc.u64 %14, %31, %47;\n\t""subc.cc.u64 %15, %32, %48;\n\t""subc.u64 %16, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(c[15]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(a[15]),"l"(b[0]),"l"(b[1]),"l"(b[2]),"l"(b[3]),"l"(b[4]),"l"(b[5]),"l"(b[6]),"l"(b[7]),"l"(b[8]),"l"(b[9]),"l"(b[10]),"l"(b[11]),"l"(b[12]),"l"(b[13]),"l"(b[14]),"l"(b[15]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[16], const Base a[16], Base b) { Base br; asm("sub.cc.u64 %0, %17, %33;\n\t""subc.cc.u64 %1, %18, 0;\n\t""subc.cc.u64 %2, %19, 0;\n\t""subc.cc.u64 %3, %20, 0;\n\t""subc.cc.u64 %4, %21, 0;\n\t""subc.cc.u64 %5, %22, 0;\n\t""subc.cc.u64 %6, %23, 0;\n\t""subc.cc.u64 %7, %24, 0;\n\t""subc.cc.u64 %8, %25, 0;\n\t""subc.cc.u64 %9, %26, 0;\n\t""subc.cc.u64 %10, %27, 0;\n\t""subc.cc.u64 %11, %28, 0;\n\t""subc.cc.u64 %12, %29, 0;\n\t""subc.cc.u64 %13, %30, 0;\n\t""subc.cc.u64 %14, %31, 0;\n\t""subc.cc.u64 %15, %32, 0;\n\t""subc.u64 %16, 0, 0;" : "=l"(c[0]),"=l"(c[1]),"=l"(c[2]),"=l"(c[3]),"=l"(c[4]),"=l"(c[5]),"=l"(c[6]),"=l"(c[7]),"=l"(c[8]),"=l"(c[9]),"=l"(c[10]),"=l"(c[11]),"=l"(c[12]),"=l"(c[13]),"=l"(c[14]),"=l"(c[15]),"=l"(br) : "l"(a[0]),"l"(a[1]),"l"(a[2]),"l"(a[3]),"l"(a[4]),"l"(a[5]),"l"(a[6]),"l"(a[7]),"l"(a[8]),"l"(a[9]),"l"(a[10]),"l"(a[11]),"l"(a[12]),"l"(a[13]),"l"(a[14]),"l"(a[15]),"l"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 1> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[1], const Base a[1], const Base b[1]) { Base cy; asm("add.cc.u32 %0, %2, %3;\n\t""addc.u32 %1, 0, 0;" : "=r"(c[0]),"=r"(cy) : "r"(a[0]),"r"(b[0]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[1], const Base a[1], Base b) { Base cy; asm("add.cc.u32 %0, %2, %3;\n\t""addc.u32 %1, 0, 0;" : "=r"(c[0]),"=r"(cy) : "r"(a[0]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[1], const Base a[1], const Base b[1]) { Base br; asm("sub.cc.u32 %0, %2, %3;\n\t""subc.u32 %1, 0, 0;" : "=r"(c[0]),"=r"(br) : "r"(a[0]),"r"(b[0]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[1], const Base a[1], Base b) { Base br; asm("sub.cc.u32 %0, %2, %3;\n\t""subc.u32 %1, 0, 0;" : "=r"(c[0]),"=r"(br) : "r"(a[0]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 2> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[2], const Base a[2], const Base b[2]) { Base cy; asm("add.cc.u32 %0, %3, %5;\n\t""addc.cc.u32 %1, %4, %6;\n\t""addc.u32 %2, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(b[0]),"r"(b[1]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[2], const Base a[2], Base b) { Base cy; asm("add.cc.u32 %0, %3, %5;\n\t""addc.cc.u32 %1, %4, 0;\n\t""addc.u32 %2, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[2], const Base a[2], const Base b[2]) { Base br; asm("sub.cc.u32 %0, %3, %5;\n\t""subc.cc.u32 %1, %4, %6;\n\t""subc.u32 %2, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(b[0]),"r"(b[1]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[2], const Base a[2], Base b) { Base br; asm("sub.cc.u32 %0, %3, %5;\n\t""subc.cc.u32 %1, %4, 0;\n\t""subc.u32 %2, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 3> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[3], const Base a[3], const Base b[3]) { Base cy; asm("add.cc.u32 %0, %4, %7;\n\t""addc.cc.u32 %1, %5, %8;\n\t""addc.cc.u32 %2, %6, %9;\n\t""addc.u32 %3, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(b[0]),"r"(b[1]),"r"(b[2]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[3], const Base a[3], Base b) { Base cy; asm("add.cc.u32 %0, %4, %7;\n\t""addc.cc.u32 %1, %5, 0;\n\t""addc.cc.u32 %2, %6, 0;\n\t""addc.u32 %3, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[3], const Base a[3], const Base b[3]) { Base br; asm("sub.cc.u32 %0, %4, %7;\n\t""subc.cc.u32 %1, %5, %8;\n\t""subc.cc.u32 %2, %6, %9;\n\t""subc.u32 %3, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(b[0]),"r"(b[1]),"r"(b[2]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[3], const Base a[3], Base b) { Base br; asm("sub.cc.u32 %0, %4, %7;\n\t""subc.cc.u32 %1, %5, 0;\n\t""subc.cc.u32 %2, %6, 0;\n\t""subc.u32 %3, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 4> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[4], const Base a[4], const Base b[4]) { Base cy; asm("add.cc.u32 %0, %5, %9;\n\t""addc.cc.u32 %1, %6, %10;\n\t""addc.cc.u32 %2, %7, %11;\n\t""addc.cc.u32 %3, %8, %12;\n\t""addc.u32 %4, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[4], const Base a[4], Base b) { Base cy; asm("add.cc.u32 %0, %5, %9;\n\t""addc.cc.u32 %1, %6, 0;\n\t""addc.cc.u32 %2, %7, 0;\n\t""addc.cc.u32 %3, %8, 0;\n\t""addc.u32 %4, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[4], const Base a[4], const Base b[4]) { Base br; asm("sub.cc.u32 %0, %5, %9;\n\t""subc.cc.u32 %1, %6, %10;\n\t""subc.cc.u32 %2, %7, %11;\n\t""subc.cc.u32 %3, %8, %12;\n\t""subc.u32 %4, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[4], const Base a[4], Base b) { Base br; asm("sub.cc.u32 %0, %5, %9;\n\t""subc.cc.u32 %1, %6, 0;\n\t""subc.cc.u32 %2, %7, 0;\n\t""subc.cc.u32 %3, %8, 0;\n\t""subc.u32 %4, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 5> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[5], const Base a[5], const Base b[5]) { Base cy; asm("add.cc.u32 %0, %6, %11;\n\t""addc.cc.u32 %1, %7, %12;\n\t""addc.cc.u32 %2, %8, %13;\n\t""addc.cc.u32 %3, %9, %14;\n\t""addc.cc.u32 %4, %10, %15;\n\t""addc.u32 %5, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[5], const Base a[5], Base b) { Base cy; asm("add.cc.u32 %0, %6, %11;\n\t""addc.cc.u32 %1, %7, 0;\n\t""addc.cc.u32 %2, %8, 0;\n\t""addc.cc.u32 %3, %9, 0;\n\t""addc.cc.u32 %4, %10, 0;\n\t""addc.u32 %5, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[5], const Base a[5], const Base b[5]) { Base br; asm("sub.cc.u32 %0, %6, %11;\n\t""subc.cc.u32 %1, %7, %12;\n\t""subc.cc.u32 %2, %8, %13;\n\t""subc.cc.u32 %3, %9, %14;\n\t""subc.cc.u32 %4, %10, %15;\n\t""subc.u32 %5, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[5], const Base a[5], Base b) { Base br; asm("sub.cc.u32 %0, %6, %11;\n\t""subc.cc.u32 %1, %7, 0;\n\t""subc.cc.u32 %2, %8, 0;\n\t""subc.cc.u32 %3, %9, 0;\n\t""subc.cc.u32 %4, %10, 0;\n\t""subc.u32 %5, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 6> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[6], const Base a[6], const Base b[6]) { Base cy; asm("add.cc.u32 %0, %7, %13;\n\t""addc.cc.u32 %1, %8, %14;\n\t""addc.cc.u32 %2, %9, %15;\n\t""addc.cc.u32 %3, %10, %16;\n\t""addc.cc.u32 %4, %11, %17;\n\t""addc.cc.u32 %5, %12, %18;\n\t""addc.u32 %6, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[6], const Base a[6], Base b) { Base cy; asm("add.cc.u32 %0, %7, %13;\n\t""addc.cc.u32 %1, %8, 0;\n\t""addc.cc.u32 %2, %9, 0;\n\t""addc.cc.u32 %3, %10, 0;\n\t""addc.cc.u32 %4, %11, 0;\n\t""addc.cc.u32 %5, %12, 0;\n\t""addc.u32 %6, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[6], const Base a[6], const Base b[6]) { Base br; asm("sub.cc.u32 %0, %7, %13;\n\t""subc.cc.u32 %1, %8, %14;\n\t""subc.cc.u32 %2, %9, %15;\n\t""subc.cc.u32 %3, %10, %16;\n\t""subc.cc.u32 %4, %11, %17;\n\t""subc.cc.u32 %5, %12, %18;\n\t""subc.u32 %6, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[6], const Base a[6], Base b) { Base br; asm("sub.cc.u32 %0, %7, %13;\n\t""subc.cc.u32 %1, %8, 0;\n\t""subc.cc.u32 %2, %9, 0;\n\t""subc.cc.u32 %3, %10, 0;\n\t""subc.cc.u32 %4, %11, 0;\n\t""subc.cc.u32 %5, %12, 0;\n\t""subc.u32 %6, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 7> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[7], const Base a[7], const Base b[7]) { Base cy; asm("add.cc.u32 %0, %8, %15;\n\t""addc.cc.u32 %1, %9, %16;\n\t""addc.cc.u32 %2, %10, %17;\n\t""addc.cc.u32 %3, %11, %18;\n\t""addc.cc.u32 %4, %12, %19;\n\t""addc.cc.u32 %5, %13, %20;\n\t""addc.cc.u32 %6, %14, %21;\n\t""addc.u32 %7, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[7], const Base a[7], Base b) { Base cy; asm("add.cc.u32 %0, %8, %15;\n\t""addc.cc.u32 %1, %9, 0;\n\t""addc.cc.u32 %2, %10, 0;\n\t""addc.cc.u32 %3, %11, 0;\n\t""addc.cc.u32 %4, %12, 0;\n\t""addc.cc.u32 %5, %13, 0;\n\t""addc.cc.u32 %6, %14, 0;\n\t""addc.u32 %7, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[7], const Base a[7], const Base b[7]) { Base br; asm("sub.cc.u32 %0, %8, %15;\n\t""subc.cc.u32 %1, %9, %16;\n\t""subc.cc.u32 %2, %10, %17;\n\t""subc.cc.u32 %3, %11, %18;\n\t""subc.cc.u32 %4, %12, %19;\n\t""subc.cc.u32 %5, %13, %20;\n\t""subc.cc.u32 %6, %14, %21;\n\t""subc.u32 %7, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[7], const Base a[7], Base b) { Base br; asm("sub.cc.u32 %0, %8, %15;\n\t""subc.cc.u32 %1, %9, 0;\n\t""subc.cc.u32 %2, %10, 0;\n\t""subc.cc.u32 %3, %11, 0;\n\t""subc.cc.u32 %4, %12, 0;\n\t""subc.cc.u32 %5, %13, 0;\n\t""subc.cc.u32 %6, %14, 0;\n\t""subc.u32 %7, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 8> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[8], const Base a[8], const Base b[8]) { Base cy; asm("add.cc.u32 %0, %9, %17;\n\t""addc.cc.u32 %1, %10, %18;\n\t""addc.cc.u32 %2, %11, %19;\n\t""addc.cc.u32 %3, %12, %20;\n\t""addc.cc.u32 %4, %13, %21;\n\t""addc.cc.u32 %5, %14, %22;\n\t""addc.cc.u32 %6, %15, %23;\n\t""addc.cc.u32 %7, %16, %24;\n\t""addc.u32 %8, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[8], const Base a[8], Base b) { Base cy; asm("add.cc.u32 %0, %9, %17;\n\t""addc.cc.u32 %1, %10, 0;\n\t""addc.cc.u32 %2, %11, 0;\n\t""addc.cc.u32 %3, %12, 0;\n\t""addc.cc.u32 %4, %13, 0;\n\t""addc.cc.u32 %5, %14, 0;\n\t""addc.cc.u32 %6, %15, 0;\n\t""addc.cc.u32 %7, %16, 0;\n\t""addc.u32 %8, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[8], const Base a[8], const Base b[8]) { Base br; asm("sub.cc.u32 %0, %9, %17;\n\t""subc.cc.u32 %1, %10, %18;\n\t""subc.cc.u32 %2, %11, %19;\n\t""subc.cc.u32 %3, %12, %20;\n\t""subc.cc.u32 %4, %13, %21;\n\t""subc.cc.u32 %5, %14, %22;\n\t""subc.cc.u32 %6, %15, %23;\n\t""subc.cc.u32 %7, %16, %24;\n\t""subc.u32 %8, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[8], const Base a[8], Base b) { Base br; asm("sub.cc.u32 %0, %9, %17;\n\t""subc.cc.u32 %1, %10, 0;\n\t""subc.cc.u32 %2, %11, 0;\n\t""subc.cc.u32 %3, %12, 0;\n\t""subc.cc.u32 %4, %13, 0;\n\t""subc.cc.u32 %5, %14, 0;\n\t""subc.cc.u32 %6, %15, 0;\n\t""subc.cc.u32 %7, %16, 0;\n\t""subc.u32 %8, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 9> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[9], const Base a[9], const Base b[9]) { Base cy; asm("add.cc.u32 %0, %10, %19;\n\t""addc.cc.u32 %1, %11, %20;\n\t""addc.cc.u32 %2, %12, %21;\n\t""addc.cc.u32 %3, %13, %22;\n\t""addc.cc.u32 %4, %14, %23;\n\t""addc.cc.u32 %5, %15, %24;\n\t""addc.cc.u32 %6, %16, %25;\n\t""addc.cc.u32 %7, %17, %26;\n\t""addc.cc.u32 %8, %18, %27;\n\t""addc.u32 %9, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[9], const Base a[9], Base b) { Base cy; asm("add.cc.u32 %0, %10, %19;\n\t""addc.cc.u32 %1, %11, 0;\n\t""addc.cc.u32 %2, %12, 0;\n\t""addc.cc.u32 %3, %13, 0;\n\t""addc.cc.u32 %4, %14, 0;\n\t""addc.cc.u32 %5, %15, 0;\n\t""addc.cc.u32 %6, %16, 0;\n\t""addc.cc.u32 %7, %17, 0;\n\t""addc.cc.u32 %8, %18, 0;\n\t""addc.u32 %9, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[9], const Base a[9], const Base b[9]) { Base br; asm("sub.cc.u32 %0, %10, %19;\n\t""subc.cc.u32 %1, %11, %20;\n\t""subc.cc.u32 %2, %12, %21;\n\t""subc.cc.u32 %3, %13, %22;\n\t""subc.cc.u32 %4, %14, %23;\n\t""subc.cc.u32 %5, %15, %24;\n\t""subc.cc.u32 %6, %16, %25;\n\t""subc.cc.u32 %7, %17, %26;\n\t""subc.cc.u32 %8, %18, %27;\n\t""subc.u32 %9, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[9], const Base a[9], Base b) { Base br; asm("sub.cc.u32 %0, %10, %19;\n\t""subc.cc.u32 %1, %11, 0;\n\t""subc.cc.u32 %2, %12, 0;\n\t""subc.cc.u32 %3, %13, 0;\n\t""subc.cc.u32 %4, %14, 0;\n\t""subc.cc.u32 %5, %15, 0;\n\t""subc.cc.u32 %6, %16, 0;\n\t""subc.cc.u32 %7, %17, 0;\n\t""subc.cc.u32 %8, %18, 0;\n\t""subc.u32 %9, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 10> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[10], const Base a[10], const Base b[10]) { Base cy; asm("add.cc.u32 %0, %11, %21;\n\t""addc.cc.u32 %1, %12, %22;\n\t""addc.cc.u32 %2, %13, %23;\n\t""addc.cc.u32 %3, %14, %24;\n\t""addc.cc.u32 %4, %15, %25;\n\t""addc.cc.u32 %5, %16, %26;\n\t""addc.cc.u32 %6, %17, %27;\n\t""addc.cc.u32 %7, %18, %28;\n\t""addc.cc.u32 %8, %19, %29;\n\t""addc.cc.u32 %9, %20, %30;\n\t""addc.u32 %10, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[10], const Base a[10], Base b) { Base cy; asm("add.cc.u32 %0, %11, %21;\n\t""addc.cc.u32 %1, %12, 0;\n\t""addc.cc.u32 %2, %13, 0;\n\t""addc.cc.u32 %3, %14, 0;\n\t""addc.cc.u32 %4, %15, 0;\n\t""addc.cc.u32 %5, %16, 0;\n\t""addc.cc.u32 %6, %17, 0;\n\t""addc.cc.u32 %7, %18, 0;\n\t""addc.cc.u32 %8, %19, 0;\n\t""addc.cc.u32 %9, %20, 0;\n\t""addc.u32 %10, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[10], const Base a[10], const Base b[10]) { Base br; asm("sub.cc.u32 %0, %11, %21;\n\t""subc.cc.u32 %1, %12, %22;\n\t""subc.cc.u32 %2, %13, %23;\n\t""subc.cc.u32 %3, %14, %24;\n\t""subc.cc.u32 %4, %15, %25;\n\t""subc.cc.u32 %5, %16, %26;\n\t""subc.cc.u32 %6, %17, %27;\n\t""subc.cc.u32 %7, %18, %28;\n\t""subc.cc.u32 %8, %19, %29;\n\t""subc.cc.u32 %9, %20, %30;\n\t""subc.u32 %10, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[10], const Base a[10], Base b) { Base br; asm("sub.cc.u32 %0, %11, %21;\n\t""subc.cc.u32 %1, %12, 0;\n\t""subc.cc.u32 %2, %13, 0;\n\t""subc.cc.u32 %3, %14, 0;\n\t""subc.cc.u32 %4, %15, 0;\n\t""subc.cc.u32 %5, %16, 0;\n\t""subc.cc.u32 %6, %17, 0;\n\t""subc.cc.u32 %7, %18, 0;\n\t""subc.cc.u32 %8, %19, 0;\n\t""subc.cc.u32 %9, %20, 0;\n\t""subc.u32 %10, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 11> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[11], const Base a[11], const Base b[11]) { Base cy; asm("add.cc.u32 %0, %12, %23;\n\t""addc.cc.u32 %1, %13, %24;\n\t""addc.cc.u32 %2, %14, %25;\n\t""addc.cc.u32 %3, %15, %26;\n\t""addc.cc.u32 %4, %16, %27;\n\t""addc.cc.u32 %5, %17, %28;\n\t""addc.cc.u32 %6, %18, %29;\n\t""addc.cc.u32 %7, %19, %30;\n\t""addc.cc.u32 %8, %20, %31;\n\t""addc.cc.u32 %9, %21, %32;\n\t""addc.cc.u32 %10, %22, %33;\n\t""addc.u32 %11, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[11], const Base a[11], Base b) { Base cy; asm("add.cc.u32 %0, %12, %23;\n\t""addc.cc.u32 %1, %13, 0;\n\t""addc.cc.u32 %2, %14, 0;\n\t""addc.cc.u32 %3, %15, 0;\n\t""addc.cc.u32 %4, %16, 0;\n\t""addc.cc.u32 %5, %17, 0;\n\t""addc.cc.u32 %6, %18, 0;\n\t""addc.cc.u32 %7, %19, 0;\n\t""addc.cc.u32 %8, %20, 0;\n\t""addc.cc.u32 %9, %21, 0;\n\t""addc.cc.u32 %10, %22, 0;\n\t""addc.u32 %11, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[11], const Base a[11], const Base b[11]) { Base br; asm("sub.cc.u32 %0, %12, %23;\n\t""subc.cc.u32 %1, %13, %24;\n\t""subc.cc.u32 %2, %14, %25;\n\t""subc.cc.u32 %3, %15, %26;\n\t""subc.cc.u32 %4, %16, %27;\n\t""subc.cc.u32 %5, %17, %28;\n\t""subc.cc.u32 %6, %18, %29;\n\t""subc.cc.u32 %7, %19, %30;\n\t""subc.cc.u32 %8, %20, %31;\n\t""subc.cc.u32 %9, %21, %32;\n\t""subc.cc.u32 %10, %22, %33;\n\t""subc.u32 %11, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[11], const Base a[11], Base b) { Base br; asm("sub.cc.u32 %0, %12, %23;\n\t""subc.cc.u32 %1, %13, 0;\n\t""subc.cc.u32 %2, %14, 0;\n\t""subc.cc.u32 %3, %15, 0;\n\t""subc.cc.u32 %4, %16, 0;\n\t""subc.cc.u32 %5, %17, 0;\n\t""subc.cc.u32 %6, %18, 0;\n\t""subc.cc.u32 %7, %19, 0;\n\t""subc.cc.u32 %8, %20, 0;\n\t""subc.cc.u32 %9, %21, 0;\n\t""subc.cc.u32 %10, %22, 0;\n\t""subc.u32 %11, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 12> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[12], const Base a[12], const Base b[12]) { Base cy; asm("add.cc.u32 %0, %13, %25;\n\t""addc.cc.u32 %1, %14, %26;\n\t""addc.cc.u32 %2, %15, %27;\n\t""addc.cc.u32 %3, %16, %28;\n\t""addc.cc.u32 %4, %17, %29;\n\t""addc.cc.u32 %5, %18, %30;\n\t""addc.cc.u32 %6, %19, %31;\n\t""addc.cc.u32 %7, %20, %32;\n\t""addc.cc.u32 %8, %21, %33;\n\t""addc.cc.u32 %9, %22, %34;\n\t""addc.cc.u32 %10, %23, %35;\n\t""addc.cc.u32 %11, %24, %36;\n\t""addc.u32 %12, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[12], const Base a[12], Base b) { Base cy; asm("add.cc.u32 %0, %13, %25;\n\t""addc.cc.u32 %1, %14, 0;\n\t""addc.cc.u32 %2, %15, 0;\n\t""addc.cc.u32 %3, %16, 0;\n\t""addc.cc.u32 %4, %17, 0;\n\t""addc.cc.u32 %5, %18, 0;\n\t""addc.cc.u32 %6, %19, 0;\n\t""addc.cc.u32 %7, %20, 0;\n\t""addc.cc.u32 %8, %21, 0;\n\t""addc.cc.u32 %9, %22, 0;\n\t""addc.cc.u32 %10, %23, 0;\n\t""addc.cc.u32 %11, %24, 0;\n\t""addc.u32 %12, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[12], const Base a[12], const Base b[12]) { Base br; asm("sub.cc.u32 %0, %13, %25;\n\t""subc.cc.u32 %1, %14, %26;\n\t""subc.cc.u32 %2, %15, %27;\n\t""subc.cc.u32 %3, %16, %28;\n\t""subc.cc.u32 %4, %17, %29;\n\t""subc.cc.u32 %5, %18, %30;\n\t""subc.cc.u32 %6, %19, %31;\n\t""subc.cc.u32 %7, %20, %32;\n\t""subc.cc.u32 %8, %21, %33;\n\t""subc.cc.u32 %9, %22, %34;\n\t""subc.cc.u32 %10, %23, %35;\n\t""subc.cc.u32 %11, %24, %36;\n\t""subc.u32 %12, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[12], const Base a[12], Base b) { Base br; asm("sub.cc.u32 %0, %13, %25;\n\t""subc.cc.u32 %1, %14, 0;\n\t""subc.cc.u32 %2, %15, 0;\n\t""subc.cc.u32 %3, %16, 0;\n\t""subc.cc.u32 %4, %17, 0;\n\t""subc.cc.u32 %5, %18, 0;\n\t""subc.cc.u32 %6, %19, 0;\n\t""subc.cc.u32 %7, %20, 0;\n\t""subc.cc.u32 %8, %21, 0;\n\t""subc.cc.u32 %9, %22, 0;\n\t""subc.cc.u32 %10, %23, 0;\n\t""subc.cc.u32 %11, %24, 0;\n\t""subc.u32 %12, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 13> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[13], const Base a[13], const Base b[13]) { Base cy; asm("add.cc.u32 %0, %14, %27;\n\t""addc.cc.u32 %1, %15, %28;\n\t""addc.cc.u32 %2, %16, %29;\n\t""addc.cc.u32 %3, %17, %30;\n\t""addc.cc.u32 %4, %18, %31;\n\t""addc.cc.u32 %5, %19, %32;\n\t""addc.cc.u32 %6, %20, %33;\n\t""addc.cc.u32 %7, %21, %34;\n\t""addc.cc.u32 %8, %22, %35;\n\t""addc.cc.u32 %9, %23, %36;\n\t""addc.cc.u32 %10, %24, %37;\n\t""addc.cc.u32 %11, %25, %38;\n\t""addc.cc.u32 %12, %26, %39;\n\t""addc.u32 %13, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[13], const Base a[13], Base b) { Base cy; asm("add.cc.u32 %0, %14, %27;\n\t""addc.cc.u32 %1, %15, 0;\n\t""addc.cc.u32 %2, %16, 0;\n\t""addc.cc.u32 %3, %17, 0;\n\t""addc.cc.u32 %4, %18, 0;\n\t""addc.cc.u32 %5, %19, 0;\n\t""addc.cc.u32 %6, %20, 0;\n\t""addc.cc.u32 %7, %21, 0;\n\t""addc.cc.u32 %8, %22, 0;\n\t""addc.cc.u32 %9, %23, 0;\n\t""addc.cc.u32 %10, %24, 0;\n\t""addc.cc.u32 %11, %25, 0;\n\t""addc.cc.u32 %12, %26, 0;\n\t""addc.u32 %13, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[13], const Base a[13], const Base b[13]) { Base br; asm("sub.cc.u32 %0, %14, %27;\n\t""subc.cc.u32 %1, %15, %28;\n\t""subc.cc.u32 %2, %16, %29;\n\t""subc.cc.u32 %3, %17, %30;\n\t""subc.cc.u32 %4, %18, %31;\n\t""subc.cc.u32 %5, %19, %32;\n\t""subc.cc.u32 %6, %20, %33;\n\t""subc.cc.u32 %7, %21, %34;\n\t""subc.cc.u32 %8, %22, %35;\n\t""subc.cc.u32 %9, %23, %36;\n\t""subc.cc.u32 %10, %24, %37;\n\t""subc.cc.u32 %11, %25, %38;\n\t""subc.cc.u32 %12, %26, %39;\n\t""subc.u32 %13, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[13], const Base a[13], Base b) { Base br; asm("sub.cc.u32 %0, %14, %27;\n\t""subc.cc.u32 %1, %15, 0;\n\t""subc.cc.u32 %2, %16, 0;\n\t""subc.cc.u32 %3, %17, 0;\n\t""subc.cc.u32 %4, %18, 0;\n\t""subc.cc.u32 %5, %19, 0;\n\t""subc.cc.u32 %6, %20, 0;\n\t""subc.cc.u32 %7, %21, 0;\n\t""subc.cc.u32 %8, %22, 0;\n\t""subc.cc.u32 %9, %23, 0;\n\t""subc.cc.u32 %10, %24, 0;\n\t""subc.cc.u32 %11, %25, 0;\n\t""subc.cc.u32 %12, %26, 0;\n\t""subc.u32 %13, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 14> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[14], const Base a[14], const Base b[14]) { Base cy; asm("add.cc.u32 %0, %15, %29;\n\t""addc.cc.u32 %1, %16, %30;\n\t""addc.cc.u32 %2, %17, %31;\n\t""addc.cc.u32 %3, %18, %32;\n\t""addc.cc.u32 %4, %19, %33;\n\t""addc.cc.u32 %5, %20, %34;\n\t""addc.cc.u32 %6, %21, %35;\n\t""addc.cc.u32 %7, %22, %36;\n\t""addc.cc.u32 %8, %23, %37;\n\t""addc.cc.u32 %9, %24, %38;\n\t""addc.cc.u32 %10, %25, %39;\n\t""addc.cc.u32 %11, %26, %40;\n\t""addc.cc.u32 %12, %27, %41;\n\t""addc.cc.u32 %13, %28, %42;\n\t""addc.u32 %14, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[14], const Base a[14], Base b) { Base cy; asm("add.cc.u32 %0, %15, %29;\n\t""addc.cc.u32 %1, %16, 0;\n\t""addc.cc.u32 %2, %17, 0;\n\t""addc.cc.u32 %3, %18, 0;\n\t""addc.cc.u32 %4, %19, 0;\n\t""addc.cc.u32 %5, %20, 0;\n\t""addc.cc.u32 %6, %21, 0;\n\t""addc.cc.u32 %7, %22, 0;\n\t""addc.cc.u32 %8, %23, 0;\n\t""addc.cc.u32 %9, %24, 0;\n\t""addc.cc.u32 %10, %25, 0;\n\t""addc.cc.u32 %11, %26, 0;\n\t""addc.cc.u32 %12, %27, 0;\n\t""addc.cc.u32 %13, %28, 0;\n\t""addc.u32 %14, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[14], const Base a[14], const Base b[14]) { Base br; asm("sub.cc.u32 %0, %15, %29;\n\t""subc.cc.u32 %1, %16, %30;\n\t""subc.cc.u32 %2, %17, %31;\n\t""subc.cc.u32 %3, %18, %32;\n\t""subc.cc.u32 %4, %19, %33;\n\t""subc.cc.u32 %5, %20, %34;\n\t""subc.cc.u32 %6, %21, %35;\n\t""subc.cc.u32 %7, %22, %36;\n\t""subc.cc.u32 %8, %23, %37;\n\t""subc.cc.u32 %9, %24, %38;\n\t""subc.cc.u32 %10, %25, %39;\n\t""subc.cc.u32 %11, %26, %40;\n\t""subc.cc.u32 %12, %27, %41;\n\t""subc.cc.u32 %13, %28, %42;\n\t""subc.u32 %14, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[14], const Base a[14], Base b) { Base br; asm("sub.cc.u32 %0, %15, %29;\n\t""subc.cc.u32 %1, %16, 0;\n\t""subc.cc.u32 %2, %17, 0;\n\t""subc.cc.u32 %3, %18, 0;\n\t""subc.cc.u32 %4, %19, 0;\n\t""subc.cc.u32 %5, %20, 0;\n\t""subc.cc.u32 %6, %21, 0;\n\t""subc.cc.u32 %7, %22, 0;\n\t""subc.cc.u32 %8, %23, 0;\n\t""subc.cc.u32 %9, %24, 0;\n\t""subc.cc.u32 %10, %25, 0;\n\t""subc.cc.u32 %11, %26, 0;\n\t""subc.cc.u32 %12, %27, 0;\n\t""subc.cc.u32 %13, %28, 0;\n\t""subc.u32 %14, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 15> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[15], const Base a[15], const Base b[15]) { Base cy; asm("add.cc.u32 %0, %16, %31;\n\t""addc.cc.u32 %1, %17, %32;\n\t""addc.cc.u32 %2, %18, %33;\n\t""addc.cc.u32 %3, %19, %34;\n\t""addc.cc.u32 %4, %20, %35;\n\t""addc.cc.u32 %5, %21, %36;\n\t""addc.cc.u32 %6, %22, %37;\n\t""addc.cc.u32 %7, %23, %38;\n\t""addc.cc.u32 %8, %24, %39;\n\t""addc.cc.u32 %9, %25, %40;\n\t""addc.cc.u32 %10, %26, %41;\n\t""addc.cc.u32 %11, %27, %42;\n\t""addc.cc.u32 %12, %28, %43;\n\t""addc.cc.u32 %13, %29, %44;\n\t""addc.cc.u32 %14, %30, %45;\n\t""addc.u32 %15, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[15], const Base a[15], Base b) { Base cy; asm("add.cc.u32 %0, %16, %31;\n\t""addc.cc.u32 %1, %17, 0;\n\t""addc.cc.u32 %2, %18, 0;\n\t""addc.cc.u32 %3, %19, 0;\n\t""addc.cc.u32 %4, %20, 0;\n\t""addc.cc.u32 %5, %21, 0;\n\t""addc.cc.u32 %6, %22, 0;\n\t""addc.cc.u32 %7, %23, 0;\n\t""addc.cc.u32 %8, %24, 0;\n\t""addc.cc.u32 %9, %25, 0;\n\t""addc.cc.u32 %10, %26, 0;\n\t""addc.cc.u32 %11, %27, 0;\n\t""addc.cc.u32 %12, %28, 0;\n\t""addc.cc.u32 %13, %29, 0;\n\t""addc.cc.u32 %14, %30, 0;\n\t""addc.u32 %15, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[15], const Base a[15], const Base b[15]) { Base br; asm("sub.cc.u32 %0, %16, %31;\n\t""subc.cc.u32 %1, %17, %32;\n\t""subc.cc.u32 %2, %18, %33;\n\t""subc.cc.u32 %3, %19, %34;\n\t""subc.cc.u32 %4, %20, %35;\n\t""subc.cc.u32 %5, %21, %36;\n\t""subc.cc.u32 %6, %22, %37;\n\t""subc.cc.u32 %7, %23, %38;\n\t""subc.cc.u32 %8, %24, %39;\n\t""subc.cc.u32 %9, %25, %40;\n\t""subc.cc.u32 %10, %26, %41;\n\t""subc.cc.u32 %11, %27, %42;\n\t""subc.cc.u32 %12, %28, %43;\n\t""subc.cc.u32 %13, %29, %44;\n\t""subc.cc.u32 %14, %30, %45;\n\t""subc.u32 %15, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[15], const Base a[15], Base b) { Base br; asm("sub.cc.u32 %0, %16, %31;\n\t""subc.cc.u32 %1, %17, 0;\n\t""subc.cc.u32 %2, %18, 0;\n\t""subc.cc.u32 %3, %19, 0;\n\t""subc.cc.u32 %4, %20, 0;\n\t""subc.cc.u32 %5, %21, 0;\n\t""subc.cc.u32 %6, %22, 0;\n\t""subc.cc.u32 %7, %23, 0;\n\t""subc.cc.u32 %8, %24, 0;\n\t""subc.cc.u32 %9, %25, 0;\n\t""subc.cc.u32 %10, %26, 0;\n\t""subc.cc.u32 %11, %27, 0;\n\t""subc.cc.u32 %12, %28, 0;\n\t""subc.cc.u32 %13, %29, 0;\n\t""subc.cc.u32 %14, %30, 0;\n\t""subc.u32 %15, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 16> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[16], const Base a[16], const Base b[16]) { Base cy; asm("add.cc.u32 %0, %17, %33;\n\t""addc.cc.u32 %1, %18, %34;\n\t""addc.cc.u32 %2, %19, %35;\n\t""addc.cc.u32 %3, %20, %36;\n\t""addc.cc.u32 %4, %21, %37;\n\t""addc.cc.u32 %5, %22, %38;\n\t""addc.cc.u32 %6, %23, %39;\n\t""addc.cc.u32 %7, %24, %40;\n\t""addc.cc.u32 %8, %25, %41;\n\t""addc.cc.u32 %9, %26, %42;\n\t""addc.cc.u32 %10, %27, %43;\n\t""addc.cc.u32 %11, %28, %44;\n\t""addc.cc.u32 %12, %29, %45;\n\t""addc.cc.u32 %13, %30, %46;\n\t""addc.cc.u32 %14, %31, %47;\n\t""addc.cc.u32 %15, %32, %48;\n\t""addc.u32 %16, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[16], const Base a[16], Base b) { Base cy; asm("add.cc.u32 %0, %17, %33;\n\t""addc.cc.u32 %1, %18, 0;\n\t""addc.cc.u32 %2, %19, 0;\n\t""addc.cc.u32 %3, %20, 0;\n\t""addc.cc.u32 %4, %21, 0;\n\t""addc.cc.u32 %5, %22, 0;\n\t""addc.cc.u32 %6, %23, 0;\n\t""addc.cc.u32 %7, %24, 0;\n\t""addc.cc.u32 %8, %25, 0;\n\t""addc.cc.u32 %9, %26, 0;\n\t""addc.cc.u32 %10, %27, 0;\n\t""addc.cc.u32 %11, %28, 0;\n\t""addc.cc.u32 %12, %29, 0;\n\t""addc.cc.u32 %13, %30, 0;\n\t""addc.cc.u32 %14, %31, 0;\n\t""addc.cc.u32 %15, %32, 0;\n\t""addc.u32 %16, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[16], const Base a[16], const Base b[16]) { Base br; asm("sub.cc.u32 %0, %17, %33;\n\t""subc.cc.u32 %1, %18, %34;\n\t""subc.cc.u32 %2, %19, %35;\n\t""subc.cc.u32 %3, %20, %36;\n\t""subc.cc.u32 %4, %21, %37;\n\t""subc.cc.u32 %5, %22, %38;\n\t""subc.cc.u32 %6, %23, %39;\n\t""subc.cc.u32 %7, %24, %40;\n\t""subc.cc.u32 %8, %25, %41;\n\t""subc.cc.u32 %9, %26, %42;\n\t""subc.cc.u32 %10, %27, %43;\n\t""subc.cc.u32 %11, %28, %44;\n\t""subc.cc.u32 %12, %29, %45;\n\t""subc.cc.u32 %13, %30, %46;\n\t""subc.cc.u32 %14, %31, %47;\n\t""subc.cc.u32 %15, %32, %48;\n\t""subc.u32 %16, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[16], const Base a[16], Base b) { Base br; asm("sub.cc.u32 %0, %17, %33;\n\t""subc.cc.u32 %1, %18, 0;\n\t""subc.cc.u32 %2, %19, 0;\n\t""subc.cc.u32 %3, %20, 0;\n\t""subc.cc.u32 %4, %21, 0;\n\t""subc.cc.u32 %5, %22, 0;\n\t""subc.cc.u32 %6, %23, 0;\n\t""subc.cc.u32 %7, %24, 0;\n\t""subc.cc.u32 %8, %25, 0;\n\t""subc.cc.u32 %9, %26, 0;\n\t""subc.cc.u32 %10, %27, 0;\n\t""subc.cc.u32 %11, %28, 0;\n\t""subc.cc.u32 %12, %29, 0;\n\t""subc.cc.u32 %13, %30, 0;\n\t""subc.cc.u32 %14, %31, 0;\n\t""subc.cc.u32 %15, %32, 0;\n\t""subc.u32 %16, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 17> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[17], const Base a[17], const Base b[17]) { Base cy; asm("add.cc.u32 %0, %18, %35;\n\t""addc.cc.u32 %1, %19, %36;\n\t""addc.cc.u32 %2, %20, %37;\n\t""addc.cc.u32 %3, %21, %38;\n\t""addc.cc.u32 %4, %22, %39;\n\t""addc.cc.u32 %5, %23, %40;\n\t""addc.cc.u32 %6, %24, %41;\n\t""addc.cc.u32 %7, %25, %42;\n\t""addc.cc.u32 %8, %26, %43;\n\t""addc.cc.u32 %9, %27, %44;\n\t""addc.cc.u32 %10, %28, %45;\n\t""addc.cc.u32 %11, %29, %46;\n\t""addc.cc.u32 %12, %30, %47;\n\t""addc.cc.u32 %13, %31, %48;\n\t""addc.cc.u32 %14, %32, %49;\n\t""addc.cc.u32 %15, %33, %50;\n\t""addc.cc.u32 %16, %34, %51;\n\t""addc.u32 %17, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[17], const Base a[17], Base b) { Base cy; asm("add.cc.u32 %0, %18, %35;\n\t""addc.cc.u32 %1, %19, 0;\n\t""addc.cc.u32 %2, %20, 0;\n\t""addc.cc.u32 %3, %21, 0;\n\t""addc.cc.u32 %4, %22, 0;\n\t""addc.cc.u32 %5, %23, 0;\n\t""addc.cc.u32 %6, %24, 0;\n\t""addc.cc.u32 %7, %25, 0;\n\t""addc.cc.u32 %8, %26, 0;\n\t""addc.cc.u32 %9, %27, 0;\n\t""addc.cc.u32 %10, %28, 0;\n\t""addc.cc.u32 %11, %29, 0;\n\t""addc.cc.u32 %12, %30, 0;\n\t""addc.cc.u32 %13, %31, 0;\n\t""addc.cc.u32 %14, %32, 0;\n\t""addc.cc.u32 %15, %33, 0;\n\t""addc.cc.u32 %16, %34, 0;\n\t""addc.u32 %17, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[17], const Base a[17], const Base b[17]) { Base br; asm("sub.cc.u32 %0, %18, %35;\n\t""subc.cc.u32 %1, %19, %36;\n\t""subc.cc.u32 %2, %20, %37;\n\t""subc.cc.u32 %3, %21, %38;\n\t""subc.cc.u32 %4, %22, %39;\n\t""subc.cc.u32 %5, %23, %40;\n\t""subc.cc.u32 %6, %24, %41;\n\t""subc.cc.u32 %7, %25, %42;\n\t""subc.cc.u32 %8, %26, %43;\n\t""subc.cc.u32 %9, %27, %44;\n\t""subc.cc.u32 %10, %28, %45;\n\t""subc.cc.u32 %11, %29, %46;\n\t""subc.cc.u32 %12, %30, %47;\n\t""subc.cc.u32 %13, %31, %48;\n\t""subc.cc.u32 %14, %32, %49;\n\t""subc.cc.u32 %15, %33, %50;\n\t""subc.cc.u32 %16, %34, %51;\n\t""subc.u32 %17, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[17], const Base a[17], Base b) { Base br; asm("sub.cc.u32 %0, %18, %35;\n\t""subc.cc.u32 %1, %19, 0;\n\t""subc.cc.u32 %2, %20, 0;\n\t""subc.cc.u32 %3, %21, 0;\n\t""subc.cc.u32 %4, %22, 0;\n\t""subc.cc.u32 %5, %23, 0;\n\t""subc.cc.u32 %6, %24, 0;\n\t""subc.cc.u32 %7, %25, 0;\n\t""subc.cc.u32 %8, %26, 0;\n\t""subc.cc.u32 %9, %27, 0;\n\t""subc.cc.u32 %10, %28, 0;\n\t""subc.cc.u32 %11, %29, 0;\n\t""subc.cc.u32 %12, %30, 0;\n\t""subc.cc.u32 %13, %31, 0;\n\t""subc.cc.u32 %14, %32, 0;\n\t""subc.cc.u32 %15, %33, 0;\n\t""subc.cc.u32 %16, %34, 0;\n\t""subc.u32 %17, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 18> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[18], const Base a[18], const Base b[18]) { Base cy; asm("add.cc.u32 %0, %19, %37;\n\t""addc.cc.u32 %1, %20, %38;\n\t""addc.cc.u32 %2, %21, %39;\n\t""addc.cc.u32 %3, %22, %40;\n\t""addc.cc.u32 %4, %23, %41;\n\t""addc.cc.u32 %5, %24, %42;\n\t""addc.cc.u32 %6, %25, %43;\n\t""addc.cc.u32 %7, %26, %44;\n\t""addc.cc.u32 %8, %27, %45;\n\t""addc.cc.u32 %9, %28, %46;\n\t""addc.cc.u32 %10, %29, %47;\n\t""addc.cc.u32 %11, %30, %48;\n\t""addc.cc.u32 %12, %31, %49;\n\t""addc.cc.u32 %13, %32, %50;\n\t""addc.cc.u32 %14, %33, %51;\n\t""addc.cc.u32 %15, %34, %52;\n\t""addc.cc.u32 %16, %35, %53;\n\t""addc.cc.u32 %17, %36, %54;\n\t""addc.u32 %18, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[18], const Base a[18], Base b) { Base cy; asm("add.cc.u32 %0, %19, %37;\n\t""addc.cc.u32 %1, %20, 0;\n\t""addc.cc.u32 %2, %21, 0;\n\t""addc.cc.u32 %3, %22, 0;\n\t""addc.cc.u32 %4, %23, 0;\n\t""addc.cc.u32 %5, %24, 0;\n\t""addc.cc.u32 %6, %25, 0;\n\t""addc.cc.u32 %7, %26, 0;\n\t""addc.cc.u32 %8, %27, 0;\n\t""addc.cc.u32 %9, %28, 0;\n\t""addc.cc.u32 %10, %29, 0;\n\t""addc.cc.u32 %11, %30, 0;\n\t""addc.cc.u32 %12, %31, 0;\n\t""addc.cc.u32 %13, %32, 0;\n\t""addc.cc.u32 %14, %33, 0;\n\t""addc.cc.u32 %15, %34, 0;\n\t""addc.cc.u32 %16, %35, 0;\n\t""addc.cc.u32 %17, %36, 0;\n\t""addc.u32 %18, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[18], const Base a[18], const Base b[18]) { Base br; asm("sub.cc.u32 %0, %19, %37;\n\t""subc.cc.u32 %1, %20, %38;\n\t""subc.cc.u32 %2, %21, %39;\n\t""subc.cc.u32 %3, %22, %40;\n\t""subc.cc.u32 %4, %23, %41;\n\t""subc.cc.u32 %5, %24, %42;\n\t""subc.cc.u32 %6, %25, %43;\n\t""subc.cc.u32 %7, %26, %44;\n\t""subc.cc.u32 %8, %27, %45;\n\t""subc.cc.u32 %9, %28, %46;\n\t""subc.cc.u32 %10, %29, %47;\n\t""subc.cc.u32 %11, %30, %48;\n\t""subc.cc.u32 %12, %31, %49;\n\t""subc.cc.u32 %13, %32, %50;\n\t""subc.cc.u32 %14, %33, %51;\n\t""subc.cc.u32 %15, %34, %52;\n\t""subc.cc.u32 %16, %35, %53;\n\t""subc.cc.u32 %17, %36, %54;\n\t""subc.u32 %18, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[18], const Base a[18], Base b) { Base br; asm("sub.cc.u32 %0, %19, %37;\n\t""subc.cc.u32 %1, %20, 0;\n\t""subc.cc.u32 %2, %21, 0;\n\t""subc.cc.u32 %3, %22, 0;\n\t""subc.cc.u32 %4, %23, 0;\n\t""subc.cc.u32 %5, %24, 0;\n\t""subc.cc.u32 %6, %25, 0;\n\t""subc.cc.u32 %7, %26, 0;\n\t""subc.cc.u32 %8, %27, 0;\n\t""subc.cc.u32 %9, %28, 0;\n\t""subc.cc.u32 %10, %29, 0;\n\t""subc.cc.u32 %11, %30, 0;\n\t""subc.cc.u32 %12, %31, 0;\n\t""subc.cc.u32 %13, %32, 0;\n\t""subc.cc.u32 %14, %33, 0;\n\t""subc.cc.u32 %15, %34, 0;\n\t""subc.cc.u32 %16, %35, 0;\n\t""subc.cc.u32 %17, %36, 0;\n\t""subc.u32 %18, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 19> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[19], const Base a[19], const Base b[19]) { Base cy; asm("add.cc.u32 %0, %20, %39;\n\t""addc.cc.u32 %1, %21, %40;\n\t""addc.cc.u32 %2, %22, %41;\n\t""addc.cc.u32 %3, %23, %42;\n\t""addc.cc.u32 %4, %24, %43;\n\t""addc.cc.u32 %5, %25, %44;\n\t""addc.cc.u32 %6, %26, %45;\n\t""addc.cc.u32 %7, %27, %46;\n\t""addc.cc.u32 %8, %28, %47;\n\t""addc.cc.u32 %9, %29, %48;\n\t""addc.cc.u32 %10, %30, %49;\n\t""addc.cc.u32 %11, %31, %50;\n\t""addc.cc.u32 %12, %32, %51;\n\t""addc.cc.u32 %13, %33, %52;\n\t""addc.cc.u32 %14, %34, %53;\n\t""addc.cc.u32 %15, %35, %54;\n\t""addc.cc.u32 %16, %36, %55;\n\t""addc.cc.u32 %17, %37, %56;\n\t""addc.cc.u32 %18, %38, %57;\n\t""addc.u32 %19, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[19], const Base a[19], Base b) { Base cy; asm("add.cc.u32 %0, %20, %39;\n\t""addc.cc.u32 %1, %21, 0;\n\t""addc.cc.u32 %2, %22, 0;\n\t""addc.cc.u32 %3, %23, 0;\n\t""addc.cc.u32 %4, %24, 0;\n\t""addc.cc.u32 %5, %25, 0;\n\t""addc.cc.u32 %6, %26, 0;\n\t""addc.cc.u32 %7, %27, 0;\n\t""addc.cc.u32 %8, %28, 0;\n\t""addc.cc.u32 %9, %29, 0;\n\t""addc.cc.u32 %10, %30, 0;\n\t""addc.cc.u32 %11, %31, 0;\n\t""addc.cc.u32 %12, %32, 0;\n\t""addc.cc.u32 %13, %33, 0;\n\t""addc.cc.u32 %14, %34, 0;\n\t""addc.cc.u32 %15, %35, 0;\n\t""addc.cc.u32 %16, %36, 0;\n\t""addc.cc.u32 %17, %37, 0;\n\t""addc.cc.u32 %18, %38, 0;\n\t""addc.u32 %19, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[19], const Base a[19], const Base b[19]) { Base br; asm("sub.cc.u32 %0, %20, %39;\n\t""subc.cc.u32 %1, %21, %40;\n\t""subc.cc.u32 %2, %22, %41;\n\t""subc.cc.u32 %3, %23, %42;\n\t""subc.cc.u32 %4, %24, %43;\n\t""subc.cc.u32 %5, %25, %44;\n\t""subc.cc.u32 %6, %26, %45;\n\t""subc.cc.u32 %7, %27, %46;\n\t""subc.cc.u32 %8, %28, %47;\n\t""subc.cc.u32 %9, %29, %48;\n\t""subc.cc.u32 %10, %30, %49;\n\t""subc.cc.u32 %11, %31, %50;\n\t""subc.cc.u32 %12, %32, %51;\n\t""subc.cc.u32 %13, %33, %52;\n\t""subc.cc.u32 %14, %34, %53;\n\t""subc.cc.u32 %15, %35, %54;\n\t""subc.cc.u32 %16, %36, %55;\n\t""subc.cc.u32 %17, %37, %56;\n\t""subc.cc.u32 %18, %38, %57;\n\t""subc.u32 %19, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[19], const Base a[19], Base b) { Base br; asm("sub.cc.u32 %0, %20, %39;\n\t""subc.cc.u32 %1, %21, 0;\n\t""subc.cc.u32 %2, %22, 0;\n\t""subc.cc.u32 %3, %23, 0;\n\t""subc.cc.u32 %4, %24, 0;\n\t""subc.cc.u32 %5, %25, 0;\n\t""subc.cc.u32 %6, %26, 0;\n\t""subc.cc.u32 %7, %27, 0;\n\t""subc.cc.u32 %8, %28, 0;\n\t""subc.cc.u32 %9, %29, 0;\n\t""subc.cc.u32 %10, %30, 0;\n\t""subc.cc.u32 %11, %31, 0;\n\t""subc.cc.u32 %12, %32, 0;\n\t""subc.cc.u32 %13, %33, 0;\n\t""subc.cc.u32 %14, %34, 0;\n\t""subc.cc.u32 %15, %35, 0;\n\t""subc.cc.u32 %16, %36, 0;\n\t""subc.cc.u32 %17, %37, 0;\n\t""subc.cc.u32 %18, %38, 0;\n\t""subc.u32 %19, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 20> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[20], const Base a[20], const Base b[20]) { Base cy; asm("add.cc.u32 %0, %21, %41;\n\t""addc.cc.u32 %1, %22, %42;\n\t""addc.cc.u32 %2, %23, %43;\n\t""addc.cc.u32 %3, %24, %44;\n\t""addc.cc.u32 %4, %25, %45;\n\t""addc.cc.u32 %5, %26, %46;\n\t""addc.cc.u32 %6, %27, %47;\n\t""addc.cc.u32 %7, %28, %48;\n\t""addc.cc.u32 %8, %29, %49;\n\t""addc.cc.u32 %9, %30, %50;\n\t""addc.cc.u32 %10, %31, %51;\n\t""addc.cc.u32 %11, %32, %52;\n\t""addc.cc.u32 %12, %33, %53;\n\t""addc.cc.u32 %13, %34, %54;\n\t""addc.cc.u32 %14, %35, %55;\n\t""addc.cc.u32 %15, %36, %56;\n\t""addc.cc.u32 %16, %37, %57;\n\t""addc.cc.u32 %17, %38, %58;\n\t""addc.cc.u32 %18, %39, %59;\n\t""addc.cc.u32 %19, %40, %60;\n\t""addc.u32 %20, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[20], const Base a[20], Base b) { Base cy; asm("add.cc.u32 %0, %21, %41;\n\t""addc.cc.u32 %1, %22, 0;\n\t""addc.cc.u32 %2, %23, 0;\n\t""addc.cc.u32 %3, %24, 0;\n\t""addc.cc.u32 %4, %25, 0;\n\t""addc.cc.u32 %5, %26, 0;\n\t""addc.cc.u32 %6, %27, 0;\n\t""addc.cc.u32 %7, %28, 0;\n\t""addc.cc.u32 %8, %29, 0;\n\t""addc.cc.u32 %9, %30, 0;\n\t""addc.cc.u32 %10, %31, 0;\n\t""addc.cc.u32 %11, %32, 0;\n\t""addc.cc.u32 %12, %33, 0;\n\t""addc.cc.u32 %13, %34, 0;\n\t""addc.cc.u32 %14, %35, 0;\n\t""addc.cc.u32 %15, %36, 0;\n\t""addc.cc.u32 %16, %37, 0;\n\t""addc.cc.u32 %17, %38, 0;\n\t""addc.cc.u32 %18, %39, 0;\n\t""addc.cc.u32 %19, %40, 0;\n\t""addc.u32 %20, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[20], const Base a[20], const Base b[20]) { Base br; asm("sub.cc.u32 %0, %21, %41;\n\t""subc.cc.u32 %1, %22, %42;\n\t""subc.cc.u32 %2, %23, %43;\n\t""subc.cc.u32 %3, %24, %44;\n\t""subc.cc.u32 %4, %25, %45;\n\t""subc.cc.u32 %5, %26, %46;\n\t""subc.cc.u32 %6, %27, %47;\n\t""subc.cc.u32 %7, %28, %48;\n\t""subc.cc.u32 %8, %29, %49;\n\t""subc.cc.u32 %9, %30, %50;\n\t""subc.cc.u32 %10, %31, %51;\n\t""subc.cc.u32 %11, %32, %52;\n\t""subc.cc.u32 %12, %33, %53;\n\t""subc.cc.u32 %13, %34, %54;\n\t""subc.cc.u32 %14, %35, %55;\n\t""subc.cc.u32 %15, %36, %56;\n\t""subc.cc.u32 %16, %37, %57;\n\t""subc.cc.u32 %17, %38, %58;\n\t""subc.cc.u32 %18, %39, %59;\n\t""subc.cc.u32 %19, %40, %60;\n\t""subc.u32 %20, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[20], const Base a[20], Base b) { Base br; asm("sub.cc.u32 %0, %21, %41;\n\t""subc.cc.u32 %1, %22, 0;\n\t""subc.cc.u32 %2, %23, 0;\n\t""subc.cc.u32 %3, %24, 0;\n\t""subc.cc.u32 %4, %25, 0;\n\t""subc.cc.u32 %5, %26, 0;\n\t""subc.cc.u32 %6, %27, 0;\n\t""subc.cc.u32 %7, %28, 0;\n\t""subc.cc.u32 %8, %29, 0;\n\t""subc.cc.u32 %9, %30, 0;\n\t""subc.cc.u32 %10, %31, 0;\n\t""subc.cc.u32 %11, %32, 0;\n\t""subc.cc.u32 %12, %33, 0;\n\t""subc.cc.u32 %13, %34, 0;\n\t""subc.cc.u32 %14, %35, 0;\n\t""subc.cc.u32 %15, %36, 0;\n\t""subc.cc.u32 %16, %37, 0;\n\t""subc.cc.u32 %17, %38, 0;\n\t""subc.cc.u32 %18, %39, 0;\n\t""subc.cc.u32 %19, %40, 0;\n\t""subc.u32 %20, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 21> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[21], const Base a[21], const Base b[21]) { Base cy; asm("add.cc.u32 %0, %22, %43;\n\t""addc.cc.u32 %1, %23, %44;\n\t""addc.cc.u32 %2, %24, %45;\n\t""addc.cc.u32 %3, %25, %46;\n\t""addc.cc.u32 %4, %26, %47;\n\t""addc.cc.u32 %5, %27, %48;\n\t""addc.cc.u32 %6, %28, %49;\n\t""addc.cc.u32 %7, %29, %50;\n\t""addc.cc.u32 %8, %30, %51;\n\t""addc.cc.u32 %9, %31, %52;\n\t""addc.cc.u32 %10, %32, %53;\n\t""addc.cc.u32 %11, %33, %54;\n\t""addc.cc.u32 %12, %34, %55;\n\t""addc.cc.u32 %13, %35, %56;\n\t""addc.cc.u32 %14, %36, %57;\n\t""addc.cc.u32 %15, %37, %58;\n\t""addc.cc.u32 %16, %38, %59;\n\t""addc.cc.u32 %17, %39, %60;\n\t""addc.cc.u32 %18, %40, %61;\n\t""addc.cc.u32 %19, %41, %62;\n\t""addc.cc.u32 %20, %42, %63;\n\t""addc.u32 %21, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[21], const Base a[21], Base b) { Base cy; asm("add.cc.u32 %0, %22, %43;\n\t""addc.cc.u32 %1, %23, 0;\n\t""addc.cc.u32 %2, %24, 0;\n\t""addc.cc.u32 %3, %25, 0;\n\t""addc.cc.u32 %4, %26, 0;\n\t""addc.cc.u32 %5, %27, 0;\n\t""addc.cc.u32 %6, %28, 0;\n\t""addc.cc.u32 %7, %29, 0;\n\t""addc.cc.u32 %8, %30, 0;\n\t""addc.cc.u32 %9, %31, 0;\n\t""addc.cc.u32 %10, %32, 0;\n\t""addc.cc.u32 %11, %33, 0;\n\t""addc.cc.u32 %12, %34, 0;\n\t""addc.cc.u32 %13, %35, 0;\n\t""addc.cc.u32 %14, %36, 0;\n\t""addc.cc.u32 %15, %37, 0;\n\t""addc.cc.u32 %16, %38, 0;\n\t""addc.cc.u32 %17, %39, 0;\n\t""addc.cc.u32 %18, %40, 0;\n\t""addc.cc.u32 %19, %41, 0;\n\t""addc.cc.u32 %20, %42, 0;\n\t""addc.u32 %21, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[21], const Base a[21], const Base b[21]) { Base br; asm("sub.cc.u32 %0, %22, %43;\n\t""subc.cc.u32 %1, %23, %44;\n\t""subc.cc.u32 %2, %24, %45;\n\t""subc.cc.u32 %3, %25, %46;\n\t""subc.cc.u32 %4, %26, %47;\n\t""subc.cc.u32 %5, %27, %48;\n\t""subc.cc.u32 %6, %28, %49;\n\t""subc.cc.u32 %7, %29, %50;\n\t""subc.cc.u32 %8, %30, %51;\n\t""subc.cc.u32 %9, %31, %52;\n\t""subc.cc.u32 %10, %32, %53;\n\t""subc.cc.u32 %11, %33, %54;\n\t""subc.cc.u32 %12, %34, %55;\n\t""subc.cc.u32 %13, %35, %56;\n\t""subc.cc.u32 %14, %36, %57;\n\t""subc.cc.u32 %15, %37, %58;\n\t""subc.cc.u32 %16, %38, %59;\n\t""subc.cc.u32 %17, %39, %60;\n\t""subc.cc.u32 %18, %40, %61;\n\t""subc.cc.u32 %19, %41, %62;\n\t""subc.cc.u32 %20, %42, %63;\n\t""subc.u32 %21, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[21], const Base a[21], Base b) { Base br; asm("sub.cc.u32 %0, %22, %43;\n\t""subc.cc.u32 %1, %23, 0;\n\t""subc.cc.u32 %2, %24, 0;\n\t""subc.cc.u32 %3, %25, 0;\n\t""subc.cc.u32 %4, %26, 0;\n\t""subc.cc.u32 %5, %27, 0;\n\t""subc.cc.u32 %6, %28, 0;\n\t""subc.cc.u32 %7, %29, 0;\n\t""subc.cc.u32 %8, %30, 0;\n\t""subc.cc.u32 %9, %31, 0;\n\t""subc.cc.u32 %10, %32, 0;\n\t""subc.cc.u32 %11, %33, 0;\n\t""subc.cc.u32 %12, %34, 0;\n\t""subc.cc.u32 %13, %35, 0;\n\t""subc.cc.u32 %14, %36, 0;\n\t""subc.cc.u32 %15, %37, 0;\n\t""subc.cc.u32 %16, %38, 0;\n\t""subc.cc.u32 %17, %39, 0;\n\t""subc.cc.u32 %18, %40, 0;\n\t""subc.cc.u32 %19, %41, 0;\n\t""subc.cc.u32 %20, %42, 0;\n\t""subc.u32 %21, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 22> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[22], const Base a[22], const Base b[22]) { Base cy; asm("add.cc.u32 %0, %23, %45;\n\t""addc.cc.u32 %1, %24, %46;\n\t""addc.cc.u32 %2, %25, %47;\n\t""addc.cc.u32 %3, %26, %48;\n\t""addc.cc.u32 %4, %27, %49;\n\t""addc.cc.u32 %5, %28, %50;\n\t""addc.cc.u32 %6, %29, %51;\n\t""addc.cc.u32 %7, %30, %52;\n\t""addc.cc.u32 %8, %31, %53;\n\t""addc.cc.u32 %9, %32, %54;\n\t""addc.cc.u32 %10, %33, %55;\n\t""addc.cc.u32 %11, %34, %56;\n\t""addc.cc.u32 %12, %35, %57;\n\t""addc.cc.u32 %13, %36, %58;\n\t""addc.cc.u32 %14, %37, %59;\n\t""addc.cc.u32 %15, %38, %60;\n\t""addc.cc.u32 %16, %39, %61;\n\t""addc.cc.u32 %17, %40, %62;\n\t""addc.cc.u32 %18, %41, %63;\n\t""addc.cc.u32 %19, %42, %64;\n\t""addc.cc.u32 %20, %43, %65;\n\t""addc.cc.u32 %21, %44, %66;\n\t""addc.u32 %22, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[22], const Base a[22], Base b) { Base cy; asm("add.cc.u32 %0, %23, %45;\n\t""addc.cc.u32 %1, %24, 0;\n\t""addc.cc.u32 %2, %25, 0;\n\t""addc.cc.u32 %3, %26, 0;\n\t""addc.cc.u32 %4, %27, 0;\n\t""addc.cc.u32 %5, %28, 0;\n\t""addc.cc.u32 %6, %29, 0;\n\t""addc.cc.u32 %7, %30, 0;\n\t""addc.cc.u32 %8, %31, 0;\n\t""addc.cc.u32 %9, %32, 0;\n\t""addc.cc.u32 %10, %33, 0;\n\t""addc.cc.u32 %11, %34, 0;\n\t""addc.cc.u32 %12, %35, 0;\n\t""addc.cc.u32 %13, %36, 0;\n\t""addc.cc.u32 %14, %37, 0;\n\t""addc.cc.u32 %15, %38, 0;\n\t""addc.cc.u32 %16, %39, 0;\n\t""addc.cc.u32 %17, %40, 0;\n\t""addc.cc.u32 %18, %41, 0;\n\t""addc.cc.u32 %19, %42, 0;\n\t""addc.cc.u32 %20, %43, 0;\n\t""addc.cc.u32 %21, %44, 0;\n\t""addc.u32 %22, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[22], const Base a[22], const Base b[22]) { Base br; asm("sub.cc.u32 %0, %23, %45;\n\t""subc.cc.u32 %1, %24, %46;\n\t""subc.cc.u32 %2, %25, %47;\n\t""subc.cc.u32 %3, %26, %48;\n\t""subc.cc.u32 %4, %27, %49;\n\t""subc.cc.u32 %5, %28, %50;\n\t""subc.cc.u32 %6, %29, %51;\n\t""subc.cc.u32 %7, %30, %52;\n\t""subc.cc.u32 %8, %31, %53;\n\t""subc.cc.u32 %9, %32, %54;\n\t""subc.cc.u32 %10, %33, %55;\n\t""subc.cc.u32 %11, %34, %56;\n\t""subc.cc.u32 %12, %35, %57;\n\t""subc.cc.u32 %13, %36, %58;\n\t""subc.cc.u32 %14, %37, %59;\n\t""subc.cc.u32 %15, %38, %60;\n\t""subc.cc.u32 %16, %39, %61;\n\t""subc.cc.u32 %17, %40, %62;\n\t""subc.cc.u32 %18, %41, %63;\n\t""subc.cc.u32 %19, %42, %64;\n\t""subc.cc.u32 %20, %43, %65;\n\t""subc.cc.u32 %21, %44, %66;\n\t""subc.u32 %22, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[22], const Base a[22], Base b) { Base br; asm("sub.cc.u32 %0, %23, %45;\n\t""subc.cc.u32 %1, %24, 0;\n\t""subc.cc.u32 %2, %25, 0;\n\t""subc.cc.u32 %3, %26, 0;\n\t""subc.cc.u32 %4, %27, 0;\n\t""subc.cc.u32 %5, %28, 0;\n\t""subc.cc.u32 %6, %29, 0;\n\t""subc.cc.u32 %7, %30, 0;\n\t""subc.cc.u32 %8, %31, 0;\n\t""subc.cc.u32 %9, %32, 0;\n\t""subc.cc.u32 %10, %33, 0;\n\t""subc.cc.u32 %11, %34, 0;\n\t""subc.cc.u32 %12, %35, 0;\n\t""subc.cc.u32 %13, %36, 0;\n\t""subc.cc.u32 %14, %37, 0;\n\t""subc.cc.u32 %15, %38, 0;\n\t""subc.cc.u32 %16, %39, 0;\n\t""subc.cc.u32 %17, %40, 0;\n\t""subc.cc.u32 %18, %41, 0;\n\t""subc.cc.u32 %19, %42, 0;\n\t""subc.cc.u32 %20, %43, 0;\n\t""subc.cc.u32 %21, %44, 0;\n\t""subc.u32 %22, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 23> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[23], const Base a[23], const Base b[23]) { Base cy; asm("add.cc.u32 %0, %24, %47;\n\t""addc.cc.u32 %1, %25, %48;\n\t""addc.cc.u32 %2, %26, %49;\n\t""addc.cc.u32 %3, %27, %50;\n\t""addc.cc.u32 %4, %28, %51;\n\t""addc.cc.u32 %5, %29, %52;\n\t""addc.cc.u32 %6, %30, %53;\n\t""addc.cc.u32 %7, %31, %54;\n\t""addc.cc.u32 %8, %32, %55;\n\t""addc.cc.u32 %9, %33, %56;\n\t""addc.cc.u32 %10, %34, %57;\n\t""addc.cc.u32 %11, %35, %58;\n\t""addc.cc.u32 %12, %36, %59;\n\t""addc.cc.u32 %13, %37, %60;\n\t""addc.cc.u32 %14, %38, %61;\n\t""addc.cc.u32 %15, %39, %62;\n\t""addc.cc.u32 %16, %40, %63;\n\t""addc.cc.u32 %17, %41, %64;\n\t""addc.cc.u32 %18, %42, %65;\n\t""addc.cc.u32 %19, %43, %66;\n\t""addc.cc.u32 %20, %44, %67;\n\t""addc.cc.u32 %21, %45, %68;\n\t""addc.cc.u32 %22, %46, %69;\n\t""addc.u32 %23, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[23], const Base a[23], Base b) { Base cy; asm("add.cc.u32 %0, %24, %47;\n\t""addc.cc.u32 %1, %25, 0;\n\t""addc.cc.u32 %2, %26, 0;\n\t""addc.cc.u32 %3, %27, 0;\n\t""addc.cc.u32 %4, %28, 0;\n\t""addc.cc.u32 %5, %29, 0;\n\t""addc.cc.u32 %6, %30, 0;\n\t""addc.cc.u32 %7, %31, 0;\n\t""addc.cc.u32 %8, %32, 0;\n\t""addc.cc.u32 %9, %33, 0;\n\t""addc.cc.u32 %10, %34, 0;\n\t""addc.cc.u32 %11, %35, 0;\n\t""addc.cc.u32 %12, %36, 0;\n\t""addc.cc.u32 %13, %37, 0;\n\t""addc.cc.u32 %14, %38, 0;\n\t""addc.cc.u32 %15, %39, 0;\n\t""addc.cc.u32 %16, %40, 0;\n\t""addc.cc.u32 %17, %41, 0;\n\t""addc.cc.u32 %18, %42, 0;\n\t""addc.cc.u32 %19, %43, 0;\n\t""addc.cc.u32 %20, %44, 0;\n\t""addc.cc.u32 %21, %45, 0;\n\t""addc.cc.u32 %22, %46, 0;\n\t""addc.u32 %23, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[23], const Base a[23], const Base b[23]) { Base br; asm("sub.cc.u32 %0, %24, %47;\n\t""subc.cc.u32 %1, %25, %48;\n\t""subc.cc.u32 %2, %26, %49;\n\t""subc.cc.u32 %3, %27, %50;\n\t""subc.cc.u32 %4, %28, %51;\n\t""subc.cc.u32 %5, %29, %52;\n\t""subc.cc.u32 %6, %30, %53;\n\t""subc.cc.u32 %7, %31, %54;\n\t""subc.cc.u32 %8, %32, %55;\n\t""subc.cc.u32 %9, %33, %56;\n\t""subc.cc.u32 %10, %34, %57;\n\t""subc.cc.u32 %11, %35, %58;\n\t""subc.cc.u32 %12, %36, %59;\n\t""subc.cc.u32 %13, %37, %60;\n\t""subc.cc.u32 %14, %38, %61;\n\t""subc.cc.u32 %15, %39, %62;\n\t""subc.cc.u32 %16, %40, %63;\n\t""subc.cc.u32 %17, %41, %64;\n\t""subc.cc.u32 %18, %42, %65;\n\t""subc.cc.u32 %19, %43, %66;\n\t""subc.cc.u32 %20, %44, %67;\n\t""subc.cc.u32 %21, %45, %68;\n\t""subc.cc.u32 %22, %46, %69;\n\t""subc.u32 %23, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[23], const Base a[23], Base b) { Base br; asm("sub.cc.u32 %0, %24, %47;\n\t""subc.cc.u32 %1, %25, 0;\n\t""subc.cc.u32 %2, %26, 0;\n\t""subc.cc.u32 %3, %27, 0;\n\t""subc.cc.u32 %4, %28, 0;\n\t""subc.cc.u32 %5, %29, 0;\n\t""subc.cc.u32 %6, %30, 0;\n\t""subc.cc.u32 %7, %31, 0;\n\t""subc.cc.u32 %8, %32, 0;\n\t""subc.cc.u32 %9, %33, 0;\n\t""subc.cc.u32 %10, %34, 0;\n\t""subc.cc.u32 %11, %35, 0;\n\t""subc.cc.u32 %12, %36, 0;\n\t""subc.cc.u32 %13, %37, 0;\n\t""subc.cc.u32 %14, %38, 0;\n\t""subc.cc.u32 %15, %39, 0;\n\t""subc.cc.u32 %16, %40, 0;\n\t""subc.cc.u32 %17, %41, 0;\n\t""subc.cc.u32 %18, %42, 0;\n\t""subc.cc.u32 %19, %43, 0;\n\t""subc.cc.u32 %20, %44, 0;\n\t""subc.cc.u32 %21, %45, 0;\n\t""subc.cc.u32 %22, %46, 0;\n\t""subc.u32 %23, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 24> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[24], const Base a[24], const Base b[24]) { Base cy; asm("add.cc.u32 %0, %25, %49;\n\t""addc.cc.u32 %1, %26, %50;\n\t""addc.cc.u32 %2, %27, %51;\n\t""addc.cc.u32 %3, %28, %52;\n\t""addc.cc.u32 %4, %29, %53;\n\t""addc.cc.u32 %5, %30, %54;\n\t""addc.cc.u32 %6, %31, %55;\n\t""addc.cc.u32 %7, %32, %56;\n\t""addc.cc.u32 %8, %33, %57;\n\t""addc.cc.u32 %9, %34, %58;\n\t""addc.cc.u32 %10, %35, %59;\n\t""addc.cc.u32 %11, %36, %60;\n\t""addc.cc.u32 %12, %37, %61;\n\t""addc.cc.u32 %13, %38, %62;\n\t""addc.cc.u32 %14, %39, %63;\n\t""addc.cc.u32 %15, %40, %64;\n\t""addc.cc.u32 %16, %41, %65;\n\t""addc.cc.u32 %17, %42, %66;\n\t""addc.cc.u32 %18, %43, %67;\n\t""addc.cc.u32 %19, %44, %68;\n\t""addc.cc.u32 %20, %45, %69;\n\t""addc.cc.u32 %21, %46, %70;\n\t""addc.cc.u32 %22, %47, %71;\n\t""addc.cc.u32 %23, %48, %72;\n\t""addc.u32 %24, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[24], const Base a[24], Base b) { Base cy; asm("add.cc.u32 %0, %25, %49;\n\t""addc.cc.u32 %1, %26, 0;\n\t""addc.cc.u32 %2, %27, 0;\n\t""addc.cc.u32 %3, %28, 0;\n\t""addc.cc.u32 %4, %29, 0;\n\t""addc.cc.u32 %5, %30, 0;\n\t""addc.cc.u32 %6, %31, 0;\n\t""addc.cc.u32 %7, %32, 0;\n\t""addc.cc.u32 %8, %33, 0;\n\t""addc.cc.u32 %9, %34, 0;\n\t""addc.cc.u32 %10, %35, 0;\n\t""addc.cc.u32 %11, %36, 0;\n\t""addc.cc.u32 %12, %37, 0;\n\t""addc.cc.u32 %13, %38, 0;\n\t""addc.cc.u32 %14, %39, 0;\n\t""addc.cc.u32 %15, %40, 0;\n\t""addc.cc.u32 %16, %41, 0;\n\t""addc.cc.u32 %17, %42, 0;\n\t""addc.cc.u32 %18, %43, 0;\n\t""addc.cc.u32 %19, %44, 0;\n\t""addc.cc.u32 %20, %45, 0;\n\t""addc.cc.u32 %21, %46, 0;\n\t""addc.cc.u32 %22, %47, 0;\n\t""addc.cc.u32 %23, %48, 0;\n\t""addc.u32 %24, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[24], const Base a[24], const Base b[24]) { Base br; asm("sub.cc.u32 %0, %25, %49;\n\t""subc.cc.u32 %1, %26, %50;\n\t""subc.cc.u32 %2, %27, %51;\n\t""subc.cc.u32 %3, %28, %52;\n\t""subc.cc.u32 %4, %29, %53;\n\t""subc.cc.u32 %5, %30, %54;\n\t""subc.cc.u32 %6, %31, %55;\n\t""subc.cc.u32 %7, %32, %56;\n\t""subc.cc.u32 %8, %33, %57;\n\t""subc.cc.u32 %9, %34, %58;\n\t""subc.cc.u32 %10, %35, %59;\n\t""subc.cc.u32 %11, %36, %60;\n\t""subc.cc.u32 %12, %37, %61;\n\t""subc.cc.u32 %13, %38, %62;\n\t""subc.cc.u32 %14, %39, %63;\n\t""subc.cc.u32 %15, %40, %64;\n\t""subc.cc.u32 %16, %41, %65;\n\t""subc.cc.u32 %17, %42, %66;\n\t""subc.cc.u32 %18, %43, %67;\n\t""subc.cc.u32 %19, %44, %68;\n\t""subc.cc.u32 %20, %45, %69;\n\t""subc.cc.u32 %21, %46, %70;\n\t""subc.cc.u32 %22, %47, %71;\n\t""subc.cc.u32 %23, %48, %72;\n\t""subc.u32 %24, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[24], const Base a[24], Base b) { Base br; asm("sub.cc.u32 %0, %25, %49;\n\t""subc.cc.u32 %1, %26, 0;\n\t""subc.cc.u32 %2, %27, 0;\n\t""subc.cc.u32 %3, %28, 0;\n\t""subc.cc.u32 %4, %29, 0;\n\t""subc.cc.u32 %5, %30, 0;\n\t""subc.cc.u32 %6, %31, 0;\n\t""subc.cc.u32 %7, %32, 0;\n\t""subc.cc.u32 %8, %33, 0;\n\t""subc.cc.u32 %9, %34, 0;\n\t""subc.cc.u32 %10, %35, 0;\n\t""subc.cc.u32 %11, %36, 0;\n\t""subc.cc.u32 %12, %37, 0;\n\t""subc.cc.u32 %13, %38, 0;\n\t""subc.cc.u32 %14, %39, 0;\n\t""subc.cc.u32 %15, %40, 0;\n\t""subc.cc.u32 %16, %41, 0;\n\t""subc.cc.u32 %17, %42, 0;\n\t""subc.cc.u32 %18, %43, 0;\n\t""subc.cc.u32 %19, %44, 0;\n\t""subc.cc.u32 %20, %45, 0;\n\t""subc.cc.u32 %21, %46, 0;\n\t""subc.cc.u32 %22, %47, 0;\n\t""subc.cc.u32 %23, %48, 0;\n\t""subc.u32 %24, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 25> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[25], const Base a[25], const Base b[25]) { Base cy; asm("add.cc.u32 %0, %26, %51;\n\t""addc.cc.u32 %1, %27, %52;\n\t""addc.cc.u32 %2, %28, %53;\n\t""addc.cc.u32 %3, %29, %54;\n\t""addc.cc.u32 %4, %30, %55;\n\t""addc.cc.u32 %5, %31, %56;\n\t""addc.cc.u32 %6, %32, %57;\n\t""addc.cc.u32 %7, %33, %58;\n\t""addc.cc.u32 %8, %34, %59;\n\t""addc.cc.u32 %9, %35, %60;\n\t""addc.cc.u32 %10, %36, %61;\n\t""addc.cc.u32 %11, %37, %62;\n\t""addc.cc.u32 %12, %38, %63;\n\t""addc.cc.u32 %13, %39, %64;\n\t""addc.cc.u32 %14, %40, %65;\n\t""addc.cc.u32 %15, %41, %66;\n\t""addc.cc.u32 %16, %42, %67;\n\t""addc.cc.u32 %17, %43, %68;\n\t""addc.cc.u32 %18, %44, %69;\n\t""addc.cc.u32 %19, %45, %70;\n\t""addc.cc.u32 %20, %46, %71;\n\t""addc.cc.u32 %21, %47, %72;\n\t""addc.cc.u32 %22, %48, %73;\n\t""addc.cc.u32 %23, %49, %74;\n\t""addc.cc.u32 %24, %50, %75;\n\t""addc.u32 %25, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[25], const Base a[25], Base b) { Base cy; asm("add.cc.u32 %0, %26, %51;\n\t""addc.cc.u32 %1, %27, 0;\n\t""addc.cc.u32 %2, %28, 0;\n\t""addc.cc.u32 %3, %29, 0;\n\t""addc.cc.u32 %4, %30, 0;\n\t""addc.cc.u32 %5, %31, 0;\n\t""addc.cc.u32 %6, %32, 0;\n\t""addc.cc.u32 %7, %33, 0;\n\t""addc.cc.u32 %8, %34, 0;\n\t""addc.cc.u32 %9, %35, 0;\n\t""addc.cc.u32 %10, %36, 0;\n\t""addc.cc.u32 %11, %37, 0;\n\t""addc.cc.u32 %12, %38, 0;\n\t""addc.cc.u32 %13, %39, 0;\n\t""addc.cc.u32 %14, %40, 0;\n\t""addc.cc.u32 %15, %41, 0;\n\t""addc.cc.u32 %16, %42, 0;\n\t""addc.cc.u32 %17, %43, 0;\n\t""addc.cc.u32 %18, %44, 0;\n\t""addc.cc.u32 %19, %45, 0;\n\t""addc.cc.u32 %20, %46, 0;\n\t""addc.cc.u32 %21, %47, 0;\n\t""addc.cc.u32 %22, %48, 0;\n\t""addc.cc.u32 %23, %49, 0;\n\t""addc.cc.u32 %24, %50, 0;\n\t""addc.u32 %25, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[25], const Base a[25], const Base b[25]) { Base br; asm("sub.cc.u32 %0, %26, %51;\n\t""subc.cc.u32 %1, %27, %52;\n\t""subc.cc.u32 %2, %28, %53;\n\t""subc.cc.u32 %3, %29, %54;\n\t""subc.cc.u32 %4, %30, %55;\n\t""subc.cc.u32 %5, %31, %56;\n\t""subc.cc.u32 %6, %32, %57;\n\t""subc.cc.u32 %7, %33, %58;\n\t""subc.cc.u32 %8, %34, %59;\n\t""subc.cc.u32 %9, %35, %60;\n\t""subc.cc.u32 %10, %36, %61;\n\t""subc.cc.u32 %11, %37, %62;\n\t""subc.cc.u32 %12, %38, %63;\n\t""subc.cc.u32 %13, %39, %64;\n\t""subc.cc.u32 %14, %40, %65;\n\t""subc.cc.u32 %15, %41, %66;\n\t""subc.cc.u32 %16, %42, %67;\n\t""subc.cc.u32 %17, %43, %68;\n\t""subc.cc.u32 %18, %44, %69;\n\t""subc.cc.u32 %19, %45, %70;\n\t""subc.cc.u32 %20, %46, %71;\n\t""subc.cc.u32 %21, %47, %72;\n\t""subc.cc.u32 %22, %48, %73;\n\t""subc.cc.u32 %23, %49, %74;\n\t""subc.cc.u32 %24, %50, %75;\n\t""subc.u32 %25, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[25], const Base a[25], Base b) { Base br; asm("sub.cc.u32 %0, %26, %51;\n\t""subc.cc.u32 %1, %27, 0;\n\t""subc.cc.u32 %2, %28, 0;\n\t""subc.cc.u32 %3, %29, 0;\n\t""subc.cc.u32 %4, %30, 0;\n\t""subc.cc.u32 %5, %31, 0;\n\t""subc.cc.u32 %6, %32, 0;\n\t""subc.cc.u32 %7, %33, 0;\n\t""subc.cc.u32 %8, %34, 0;\n\t""subc.cc.u32 %9, %35, 0;\n\t""subc.cc.u32 %10, %36, 0;\n\t""subc.cc.u32 %11, %37, 0;\n\t""subc.cc.u32 %12, %38, 0;\n\t""subc.cc.u32 %13, %39, 0;\n\t""subc.cc.u32 %14, %40, 0;\n\t""subc.cc.u32 %15, %41, 0;\n\t""subc.cc.u32 %16, %42, 0;\n\t""subc.cc.u32 %17, %43, 0;\n\t""subc.cc.u32 %18, %44, 0;\n\t""subc.cc.u32 %19, %45, 0;\n\t""subc.cc.u32 %20, %46, 0;\n\t""subc.cc.u32 %21, %47, 0;\n\t""subc.cc.u32 %22, %48, 0;\n\t""subc.cc.u32 %23, %49, 0;\n\t""subc.cc.u32 %24, %50, 0;\n\t""subc.u32 %25, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 26> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[26], const Base a[26], const Base b[26]) { Base cy; asm("add.cc.u32 %0, %27, %53;\n\t""addc.cc.u32 %1, %28, %54;\n\t""addc.cc.u32 %2, %29, %55;\n\t""addc.cc.u32 %3, %30, %56;\n\t""addc.cc.u32 %4, %31, %57;\n\t""addc.cc.u32 %5, %32, %58;\n\t""addc.cc.u32 %6, %33, %59;\n\t""addc.cc.u32 %7, %34, %60;\n\t""addc.cc.u32 %8, %35, %61;\n\t""addc.cc.u32 %9, %36, %62;\n\t""addc.cc.u32 %10, %37, %63;\n\t""addc.cc.u32 %11, %38, %64;\n\t""addc.cc.u32 %12, %39, %65;\n\t""addc.cc.u32 %13, %40, %66;\n\t""addc.cc.u32 %14, %41, %67;\n\t""addc.cc.u32 %15, %42, %68;\n\t""addc.cc.u32 %16, %43, %69;\n\t""addc.cc.u32 %17, %44, %70;\n\t""addc.cc.u32 %18, %45, %71;\n\t""addc.cc.u32 %19, %46, %72;\n\t""addc.cc.u32 %20, %47, %73;\n\t""addc.cc.u32 %21, %48, %74;\n\t""addc.cc.u32 %22, %49, %75;\n\t""addc.cc.u32 %23, %50, %76;\n\t""addc.cc.u32 %24, %51, %77;\n\t""addc.cc.u32 %25, %52, %78;\n\t""addc.u32 %26, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[26], const Base a[26], Base b) { Base cy; asm("add.cc.u32 %0, %27, %53;\n\t""addc.cc.u32 %1, %28, 0;\n\t""addc.cc.u32 %2, %29, 0;\n\t""addc.cc.u32 %3, %30, 0;\n\t""addc.cc.u32 %4, %31, 0;\n\t""addc.cc.u32 %5, %32, 0;\n\t""addc.cc.u32 %6, %33, 0;\n\t""addc.cc.u32 %7, %34, 0;\n\t""addc.cc.u32 %8, %35, 0;\n\t""addc.cc.u32 %9, %36, 0;\n\t""addc.cc.u32 %10, %37, 0;\n\t""addc.cc.u32 %11, %38, 0;\n\t""addc.cc.u32 %12, %39, 0;\n\t""addc.cc.u32 %13, %40, 0;\n\t""addc.cc.u32 %14, %41, 0;\n\t""addc.cc.u32 %15, %42, 0;\n\t""addc.cc.u32 %16, %43, 0;\n\t""addc.cc.u32 %17, %44, 0;\n\t""addc.cc.u32 %18, %45, 0;\n\t""addc.cc.u32 %19, %46, 0;\n\t""addc.cc.u32 %20, %47, 0;\n\t""addc.cc.u32 %21, %48, 0;\n\t""addc.cc.u32 %22, %49, 0;\n\t""addc.cc.u32 %23, %50, 0;\n\t""addc.cc.u32 %24, %51, 0;\n\t""addc.cc.u32 %25, %52, 0;\n\t""addc.u32 %26, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[26], const Base a[26], const Base b[26]) { Base br; asm("sub.cc.u32 %0, %27, %53;\n\t""subc.cc.u32 %1, %28, %54;\n\t""subc.cc.u32 %2, %29, %55;\n\t""subc.cc.u32 %3, %30, %56;\n\t""subc.cc.u32 %4, %31, %57;\n\t""subc.cc.u32 %5, %32, %58;\n\t""subc.cc.u32 %6, %33, %59;\n\t""subc.cc.u32 %7, %34, %60;\n\t""subc.cc.u32 %8, %35, %61;\n\t""subc.cc.u32 %9, %36, %62;\n\t""subc.cc.u32 %10, %37, %63;\n\t""subc.cc.u32 %11, %38, %64;\n\t""subc.cc.u32 %12, %39, %65;\n\t""subc.cc.u32 %13, %40, %66;\n\t""subc.cc.u32 %14, %41, %67;\n\t""subc.cc.u32 %15, %42, %68;\n\t""subc.cc.u32 %16, %43, %69;\n\t""subc.cc.u32 %17, %44, %70;\n\t""subc.cc.u32 %18, %45, %71;\n\t""subc.cc.u32 %19, %46, %72;\n\t""subc.cc.u32 %20, %47, %73;\n\t""subc.cc.u32 %21, %48, %74;\n\t""subc.cc.u32 %22, %49, %75;\n\t""subc.cc.u32 %23, %50, %76;\n\t""subc.cc.u32 %24, %51, %77;\n\t""subc.cc.u32 %25, %52, %78;\n\t""subc.u32 %26, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[26], const Base a[26], Base b) { Base br; asm("sub.cc.u32 %0, %27, %53;\n\t""subc.cc.u32 %1, %28, 0;\n\t""subc.cc.u32 %2, %29, 0;\n\t""subc.cc.u32 %3, %30, 0;\n\t""subc.cc.u32 %4, %31, 0;\n\t""subc.cc.u32 %5, %32, 0;\n\t""subc.cc.u32 %6, %33, 0;\n\t""subc.cc.u32 %7, %34, 0;\n\t""subc.cc.u32 %8, %35, 0;\n\t""subc.cc.u32 %9, %36, 0;\n\t""subc.cc.u32 %10, %37, 0;\n\t""subc.cc.u32 %11, %38, 0;\n\t""subc.cc.u32 %12, %39, 0;\n\t""subc.cc.u32 %13, %40, 0;\n\t""subc.cc.u32 %14, %41, 0;\n\t""subc.cc.u32 %15, %42, 0;\n\t""subc.cc.u32 %16, %43, 0;\n\t""subc.cc.u32 %17, %44, 0;\n\t""subc.cc.u32 %18, %45, 0;\n\t""subc.cc.u32 %19, %46, 0;\n\t""subc.cc.u32 %20, %47, 0;\n\t""subc.cc.u32 %21, %48, 0;\n\t""subc.cc.u32 %22, %49, 0;\n\t""subc.cc.u32 %23, %50, 0;\n\t""subc.cc.u32 %24, %51, 0;\n\t""subc.cc.u32 %25, %52, 0;\n\t""subc.u32 %26, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 27> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[27], const Base a[27], const Base b[27]) { Base cy; asm("add.cc.u32 %0, %28, %55;\n\t""addc.cc.u32 %1, %29, %56;\n\t""addc.cc.u32 %2, %30, %57;\n\t""addc.cc.u32 %3, %31, %58;\n\t""addc.cc.u32 %4, %32, %59;\n\t""addc.cc.u32 %5, %33, %60;\n\t""addc.cc.u32 %6, %34, %61;\n\t""addc.cc.u32 %7, %35, %62;\n\t""addc.cc.u32 %8, %36, %63;\n\t""addc.cc.u32 %9, %37, %64;\n\t""addc.cc.u32 %10, %38, %65;\n\t""addc.cc.u32 %11, %39, %66;\n\t""addc.cc.u32 %12, %40, %67;\n\t""addc.cc.u32 %13, %41, %68;\n\t""addc.cc.u32 %14, %42, %69;\n\t""addc.cc.u32 %15, %43, %70;\n\t""addc.cc.u32 %16, %44, %71;\n\t""addc.cc.u32 %17, %45, %72;\n\t""addc.cc.u32 %18, %46, %73;\n\t""addc.cc.u32 %19, %47, %74;\n\t""addc.cc.u32 %20, %48, %75;\n\t""addc.cc.u32 %21, %49, %76;\n\t""addc.cc.u32 %22, %50, %77;\n\t""addc.cc.u32 %23, %51, %78;\n\t""addc.cc.u32 %24, %52, %79;\n\t""addc.cc.u32 %25, %53, %80;\n\t""addc.cc.u32 %26, %54, %81;\n\t""addc.u32 %27, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[27], const Base a[27], Base b) { Base cy; asm("add.cc.u32 %0, %28, %55;\n\t""addc.cc.u32 %1, %29, 0;\n\t""addc.cc.u32 %2, %30, 0;\n\t""addc.cc.u32 %3, %31, 0;\n\t""addc.cc.u32 %4, %32, 0;\n\t""addc.cc.u32 %5, %33, 0;\n\t""addc.cc.u32 %6, %34, 0;\n\t""addc.cc.u32 %7, %35, 0;\n\t""addc.cc.u32 %8, %36, 0;\n\t""addc.cc.u32 %9, %37, 0;\n\t""addc.cc.u32 %10, %38, 0;\n\t""addc.cc.u32 %11, %39, 0;\n\t""addc.cc.u32 %12, %40, 0;\n\t""addc.cc.u32 %13, %41, 0;\n\t""addc.cc.u32 %14, %42, 0;\n\t""addc.cc.u32 %15, %43, 0;\n\t""addc.cc.u32 %16, %44, 0;\n\t""addc.cc.u32 %17, %45, 0;\n\t""addc.cc.u32 %18, %46, 0;\n\t""addc.cc.u32 %19, %47, 0;\n\t""addc.cc.u32 %20, %48, 0;\n\t""addc.cc.u32 %21, %49, 0;\n\t""addc.cc.u32 %22, %50, 0;\n\t""addc.cc.u32 %23, %51, 0;\n\t""addc.cc.u32 %24, %52, 0;\n\t""addc.cc.u32 %25, %53, 0;\n\t""addc.cc.u32 %26, %54, 0;\n\t""addc.u32 %27, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[27], const Base a[27], const Base b[27]) { Base br; asm("sub.cc.u32 %0, %28, %55;\n\t""subc.cc.u32 %1, %29, %56;\n\t""subc.cc.u32 %2, %30, %57;\n\t""subc.cc.u32 %3, %31, %58;\n\t""subc.cc.u32 %4, %32, %59;\n\t""subc.cc.u32 %5, %33, %60;\n\t""subc.cc.u32 %6, %34, %61;\n\t""subc.cc.u32 %7, %35, %62;\n\t""subc.cc.u32 %8, %36, %63;\n\t""subc.cc.u32 %9, %37, %64;\n\t""subc.cc.u32 %10, %38, %65;\n\t""subc.cc.u32 %11, %39, %66;\n\t""subc.cc.u32 %12, %40, %67;\n\t""subc.cc.u32 %13, %41, %68;\n\t""subc.cc.u32 %14, %42, %69;\n\t""subc.cc.u32 %15, %43, %70;\n\t""subc.cc.u32 %16, %44, %71;\n\t""subc.cc.u32 %17, %45, %72;\n\t""subc.cc.u32 %18, %46, %73;\n\t""subc.cc.u32 %19, %47, %74;\n\t""subc.cc.u32 %20, %48, %75;\n\t""subc.cc.u32 %21, %49, %76;\n\t""subc.cc.u32 %22, %50, %77;\n\t""subc.cc.u32 %23, %51, %78;\n\t""subc.cc.u32 %24, %52, %79;\n\t""subc.cc.u32 %25, %53, %80;\n\t""subc.cc.u32 %26, %54, %81;\n\t""subc.u32 %27, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[27], const Base a[27], Base b) { Base br; asm("sub.cc.u32 %0, %28, %55;\n\t""subc.cc.u32 %1, %29, 0;\n\t""subc.cc.u32 %2, %30, 0;\n\t""subc.cc.u32 %3, %31, 0;\n\t""subc.cc.u32 %4, %32, 0;\n\t""subc.cc.u32 %5, %33, 0;\n\t""subc.cc.u32 %6, %34, 0;\n\t""subc.cc.u32 %7, %35, 0;\n\t""subc.cc.u32 %8, %36, 0;\n\t""subc.cc.u32 %9, %37, 0;\n\t""subc.cc.u32 %10, %38, 0;\n\t""subc.cc.u32 %11, %39, 0;\n\t""subc.cc.u32 %12, %40, 0;\n\t""subc.cc.u32 %13, %41, 0;\n\t""subc.cc.u32 %14, %42, 0;\n\t""subc.cc.u32 %15, %43, 0;\n\t""subc.cc.u32 %16, %44, 0;\n\t""subc.cc.u32 %17, %45, 0;\n\t""subc.cc.u32 %18, %46, 0;\n\t""subc.cc.u32 %19, %47, 0;\n\t""subc.cc.u32 %20, %48, 0;\n\t""subc.cc.u32 %21, %49, 0;\n\t""subc.cc.u32 %22, %50, 0;\n\t""subc.cc.u32 %23, %51, 0;\n\t""subc.cc.u32 %24, %52, 0;\n\t""subc.cc.u32 %25, %53, 0;\n\t""subc.cc.u32 %26, %54, 0;\n\t""subc.u32 %27, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 28> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[28], const Base a[28], const Base b[28]) { Base cy; asm("add.cc.u32 %0, %29, %57;\n\t""addc.cc.u32 %1, %30, %58;\n\t""addc.cc.u32 %2, %31, %59;\n\t""addc.cc.u32 %3, %32, %60;\n\t""addc.cc.u32 %4, %33, %61;\n\t""addc.cc.u32 %5, %34, %62;\n\t""addc.cc.u32 %6, %35, %63;\n\t""addc.cc.u32 %7, %36, %64;\n\t""addc.cc.u32 %8, %37, %65;\n\t""addc.cc.u32 %9, %38, %66;\n\t""addc.cc.u32 %10, %39, %67;\n\t""addc.cc.u32 %11, %40, %68;\n\t""addc.cc.u32 %12, %41, %69;\n\t""addc.cc.u32 %13, %42, %70;\n\t""addc.cc.u32 %14, %43, %71;\n\t""addc.cc.u32 %15, %44, %72;\n\t""addc.cc.u32 %16, %45, %73;\n\t""addc.cc.u32 %17, %46, %74;\n\t""addc.cc.u32 %18, %47, %75;\n\t""addc.cc.u32 %19, %48, %76;\n\t""addc.cc.u32 %20, %49, %77;\n\t""addc.cc.u32 %21, %50, %78;\n\t""addc.cc.u32 %22, %51, %79;\n\t""addc.cc.u32 %23, %52, %80;\n\t""addc.cc.u32 %24, %53, %81;\n\t""addc.cc.u32 %25, %54, %82;\n\t""addc.cc.u32 %26, %55, %83;\n\t""addc.cc.u32 %27, %56, %84;\n\t""addc.u32 %28, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[28], const Base a[28], Base b) { Base cy; asm("add.cc.u32 %0, %29, %57;\n\t""addc.cc.u32 %1, %30, 0;\n\t""addc.cc.u32 %2, %31, 0;\n\t""addc.cc.u32 %3, %32, 0;\n\t""addc.cc.u32 %4, %33, 0;\n\t""addc.cc.u32 %5, %34, 0;\n\t""addc.cc.u32 %6, %35, 0;\n\t""addc.cc.u32 %7, %36, 0;\n\t""addc.cc.u32 %8, %37, 0;\n\t""addc.cc.u32 %9, %38, 0;\n\t""addc.cc.u32 %10, %39, 0;\n\t""addc.cc.u32 %11, %40, 0;\n\t""addc.cc.u32 %12, %41, 0;\n\t""addc.cc.u32 %13, %42, 0;\n\t""addc.cc.u32 %14, %43, 0;\n\t""addc.cc.u32 %15, %44, 0;\n\t""addc.cc.u32 %16, %45, 0;\n\t""addc.cc.u32 %17, %46, 0;\n\t""addc.cc.u32 %18, %47, 0;\n\t""addc.cc.u32 %19, %48, 0;\n\t""addc.cc.u32 %20, %49, 0;\n\t""addc.cc.u32 %21, %50, 0;\n\t""addc.cc.u32 %22, %51, 0;\n\t""addc.cc.u32 %23, %52, 0;\n\t""addc.cc.u32 %24, %53, 0;\n\t""addc.cc.u32 %25, %54, 0;\n\t""addc.cc.u32 %26, %55, 0;\n\t""addc.cc.u32 %27, %56, 0;\n\t""addc.u32 %28, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[28], const Base a[28], const Base b[28]) { Base br; asm("sub.cc.u32 %0, %29, %57;\n\t""subc.cc.u32 %1, %30, %58;\n\t""subc.cc.u32 %2, %31, %59;\n\t""subc.cc.u32 %3, %32, %60;\n\t""subc.cc.u32 %4, %33, %61;\n\t""subc.cc.u32 %5, %34, %62;\n\t""subc.cc.u32 %6, %35, %63;\n\t""subc.cc.u32 %7, %36, %64;\n\t""subc.cc.u32 %8, %37, %65;\n\t""subc.cc.u32 %9, %38, %66;\n\t""subc.cc.u32 %10, %39, %67;\n\t""subc.cc.u32 %11, %40, %68;\n\t""subc.cc.u32 %12, %41, %69;\n\t""subc.cc.u32 %13, %42, %70;\n\t""subc.cc.u32 %14, %43, %71;\n\t""subc.cc.u32 %15, %44, %72;\n\t""subc.cc.u32 %16, %45, %73;\n\t""subc.cc.u32 %17, %46, %74;\n\t""subc.cc.u32 %18, %47, %75;\n\t""subc.cc.u32 %19, %48, %76;\n\t""subc.cc.u32 %20, %49, %77;\n\t""subc.cc.u32 %21, %50, %78;\n\t""subc.cc.u32 %22, %51, %79;\n\t""subc.cc.u32 %23, %52, %80;\n\t""subc.cc.u32 %24, %53, %81;\n\t""subc.cc.u32 %25, %54, %82;\n\t""subc.cc.u32 %26, %55, %83;\n\t""subc.cc.u32 %27, %56, %84;\n\t""subc.u32 %28, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[28], const Base a[28], Base b) { Base br; asm("sub.cc.u32 %0, %29, %57;\n\t""subc.cc.u32 %1, %30, 0;\n\t""subc.cc.u32 %2, %31, 0;\n\t""subc.cc.u32 %3, %32, 0;\n\t""subc.cc.u32 %4, %33, 0;\n\t""subc.cc.u32 %5, %34, 0;\n\t""subc.cc.u32 %6, %35, 0;\n\t""subc.cc.u32 %7, %36, 0;\n\t""subc.cc.u32 %8, %37, 0;\n\t""subc.cc.u32 %9, %38, 0;\n\t""subc.cc.u32 %10, %39, 0;\n\t""subc.cc.u32 %11, %40, 0;\n\t""subc.cc.u32 %12, %41, 0;\n\t""subc.cc.u32 %13, %42, 0;\n\t""subc.cc.u32 %14, %43, 0;\n\t""subc.cc.u32 %15, %44, 0;\n\t""subc.cc.u32 %16, %45, 0;\n\t""subc.cc.u32 %17, %46, 0;\n\t""subc.cc.u32 %18, %47, 0;\n\t""subc.cc.u32 %19, %48, 0;\n\t""subc.cc.u32 %20, %49, 0;\n\t""subc.cc.u32 %21, %50, 0;\n\t""subc.cc.u32 %22, %51, 0;\n\t""subc.cc.u32 %23, %52, 0;\n\t""subc.cc.u32 %24, %53, 0;\n\t""subc.cc.u32 %25, %54, 0;\n\t""subc.cc.u32 %26, %55, 0;\n\t""subc.cc.u32 %27, %56, 0;\n\t""subc.u32 %28, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 29> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[29], const Base a[29], const Base b[29]) { Base cy; asm("add.cc.u32 %0, %30, %59;\n\t""addc.cc.u32 %1, %31, %60;\n\t""addc.cc.u32 %2, %32, %61;\n\t""addc.cc.u32 %3, %33, %62;\n\t""addc.cc.u32 %4, %34, %63;\n\t""addc.cc.u32 %5, %35, %64;\n\t""addc.cc.u32 %6, %36, %65;\n\t""addc.cc.u32 %7, %37, %66;\n\t""addc.cc.u32 %8, %38, %67;\n\t""addc.cc.u32 %9, %39, %68;\n\t""addc.cc.u32 %10, %40, %69;\n\t""addc.cc.u32 %11, %41, %70;\n\t""addc.cc.u32 %12, %42, %71;\n\t""addc.cc.u32 %13, %43, %72;\n\t""addc.cc.u32 %14, %44, %73;\n\t""addc.cc.u32 %15, %45, %74;\n\t""addc.cc.u32 %16, %46, %75;\n\t""addc.cc.u32 %17, %47, %76;\n\t""addc.cc.u32 %18, %48, %77;\n\t""addc.cc.u32 %19, %49, %78;\n\t""addc.cc.u32 %20, %50, %79;\n\t""addc.cc.u32 %21, %51, %80;\n\t""addc.cc.u32 %22, %52, %81;\n\t""addc.cc.u32 %23, %53, %82;\n\t""addc.cc.u32 %24, %54, %83;\n\t""addc.cc.u32 %25, %55, %84;\n\t""addc.cc.u32 %26, %56, %85;\n\t""addc.cc.u32 %27, %57, %86;\n\t""addc.cc.u32 %28, %58, %87;\n\t""addc.u32 %29, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[29], const Base a[29], Base b) { Base cy; asm("add.cc.u32 %0, %30, %59;\n\t""addc.cc.u32 %1, %31, 0;\n\t""addc.cc.u32 %2, %32, 0;\n\t""addc.cc.u32 %3, %33, 0;\n\t""addc.cc.u32 %4, %34, 0;\n\t""addc.cc.u32 %5, %35, 0;\n\t""addc.cc.u32 %6, %36, 0;\n\t""addc.cc.u32 %7, %37, 0;\n\t""addc.cc.u32 %8, %38, 0;\n\t""addc.cc.u32 %9, %39, 0;\n\t""addc.cc.u32 %10, %40, 0;\n\t""addc.cc.u32 %11, %41, 0;\n\t""addc.cc.u32 %12, %42, 0;\n\t""addc.cc.u32 %13, %43, 0;\n\t""addc.cc.u32 %14, %44, 0;\n\t""addc.cc.u32 %15, %45, 0;\n\t""addc.cc.u32 %16, %46, 0;\n\t""addc.cc.u32 %17, %47, 0;\n\t""addc.cc.u32 %18, %48, 0;\n\t""addc.cc.u32 %19, %49, 0;\n\t""addc.cc.u32 %20, %50, 0;\n\t""addc.cc.u32 %21, %51, 0;\n\t""addc.cc.u32 %22, %52, 0;\n\t""addc.cc.u32 %23, %53, 0;\n\t""addc.cc.u32 %24, %54, 0;\n\t""addc.cc.u32 %25, %55, 0;\n\t""addc.cc.u32 %26, %56, 0;\n\t""addc.cc.u32 %27, %57, 0;\n\t""addc.cc.u32 %28, %58, 0;\n\t""addc.u32 %29, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[29], const Base a[29], const Base b[29]) { Base br; asm("sub.cc.u32 %0, %30, %59;\n\t""subc.cc.u32 %1, %31, %60;\n\t""subc.cc.u32 %2, %32, %61;\n\t""subc.cc.u32 %3, %33, %62;\n\t""subc.cc.u32 %4, %34, %63;\n\t""subc.cc.u32 %5, %35, %64;\n\t""subc.cc.u32 %6, %36, %65;\n\t""subc.cc.u32 %7, %37, %66;\n\t""subc.cc.u32 %8, %38, %67;\n\t""subc.cc.u32 %9, %39, %68;\n\t""subc.cc.u32 %10, %40, %69;\n\t""subc.cc.u32 %11, %41, %70;\n\t""subc.cc.u32 %12, %42, %71;\n\t""subc.cc.u32 %13, %43, %72;\n\t""subc.cc.u32 %14, %44, %73;\n\t""subc.cc.u32 %15, %45, %74;\n\t""subc.cc.u32 %16, %46, %75;\n\t""subc.cc.u32 %17, %47, %76;\n\t""subc.cc.u32 %18, %48, %77;\n\t""subc.cc.u32 %19, %49, %78;\n\t""subc.cc.u32 %20, %50, %79;\n\t""subc.cc.u32 %21, %51, %80;\n\t""subc.cc.u32 %22, %52, %81;\n\t""subc.cc.u32 %23, %53, %82;\n\t""subc.cc.u32 %24, %54, %83;\n\t""subc.cc.u32 %25, %55, %84;\n\t""subc.cc.u32 %26, %56, %85;\n\t""subc.cc.u32 %27, %57, %86;\n\t""subc.cc.u32 %28, %58, %87;\n\t""subc.u32 %29, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[29], const Base a[29], Base b) { Base br; asm("sub.cc.u32 %0, %30, %59;\n\t""subc.cc.u32 %1, %31, 0;\n\t""subc.cc.u32 %2, %32, 0;\n\t""subc.cc.u32 %3, %33, 0;\n\t""subc.cc.u32 %4, %34, 0;\n\t""subc.cc.u32 %5, %35, 0;\n\t""subc.cc.u32 %6, %36, 0;\n\t""subc.cc.u32 %7, %37, 0;\n\t""subc.cc.u32 %8, %38, 0;\n\t""subc.cc.u32 %9, %39, 0;\n\t""subc.cc.u32 %10, %40, 0;\n\t""subc.cc.u32 %11, %41, 0;\n\t""subc.cc.u32 %12, %42, 0;\n\t""subc.cc.u32 %13, %43, 0;\n\t""subc.cc.u32 %14, %44, 0;\n\t""subc.cc.u32 %15, %45, 0;\n\t""subc.cc.u32 %16, %46, 0;\n\t""subc.cc.u32 %17, %47, 0;\n\t""subc.cc.u32 %18, %48, 0;\n\t""subc.cc.u32 %19, %49, 0;\n\t""subc.cc.u32 %20, %50, 0;\n\t""subc.cc.u32 %21, %51, 0;\n\t""subc.cc.u32 %22, %52, 0;\n\t""subc.cc.u32 %23, %53, 0;\n\t""subc.cc.u32 %24, %54, 0;\n\t""subc.cc.u32 %25, %55, 0;\n\t""subc.cc.u32 %26, %56, 0;\n\t""subc.cc.u32 %27, %57, 0;\n\t""subc.cc.u32 %28, %58, 0;\n\t""subc.u32 %29, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 30> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[30], const Base a[30], const Base b[30]) { Base cy; asm("add.cc.u32 %0, %31, %61;\n\t""addc.cc.u32 %1, %32, %62;\n\t""addc.cc.u32 %2, %33, %63;\n\t""addc.cc.u32 %3, %34, %64;\n\t""addc.cc.u32 %4, %35, %65;\n\t""addc.cc.u32 %5, %36, %66;\n\t""addc.cc.u32 %6, %37, %67;\n\t""addc.cc.u32 %7, %38, %68;\n\t""addc.cc.u32 %8, %39, %69;\n\t""addc.cc.u32 %9, %40, %70;\n\t""addc.cc.u32 %10, %41, %71;\n\t""addc.cc.u32 %11, %42, %72;\n\t""addc.cc.u32 %12, %43, %73;\n\t""addc.cc.u32 %13, %44, %74;\n\t""addc.cc.u32 %14, %45, %75;\n\t""addc.cc.u32 %15, %46, %76;\n\t""addc.cc.u32 %16, %47, %77;\n\t""addc.cc.u32 %17, %48, %78;\n\t""addc.cc.u32 %18, %49, %79;\n\t""addc.cc.u32 %19, %50, %80;\n\t""addc.cc.u32 %20, %51, %81;\n\t""addc.cc.u32 %21, %52, %82;\n\t""addc.cc.u32 %22, %53, %83;\n\t""addc.cc.u32 %23, %54, %84;\n\t""addc.cc.u32 %24, %55, %85;\n\t""addc.cc.u32 %25, %56, %86;\n\t""addc.cc.u32 %26, %57, %87;\n\t""addc.cc.u32 %27, %58, %88;\n\t""addc.cc.u32 %28, %59, %89;\n\t""addc.cc.u32 %29, %60, %90;\n\t""addc.u32 %30, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[30], const Base a[30], Base b) { Base cy; asm("add.cc.u32 %0, %31, %61;\n\t""addc.cc.u32 %1, %32, 0;\n\t""addc.cc.u32 %2, %33, 0;\n\t""addc.cc.u32 %3, %34, 0;\n\t""addc.cc.u32 %4, %35, 0;\n\t""addc.cc.u32 %5, %36, 0;\n\t""addc.cc.u32 %6, %37, 0;\n\t""addc.cc.u32 %7, %38, 0;\n\t""addc.cc.u32 %8, %39, 0;\n\t""addc.cc.u32 %9, %40, 0;\n\t""addc.cc.u32 %10, %41, 0;\n\t""addc.cc.u32 %11, %42, 0;\n\t""addc.cc.u32 %12, %43, 0;\n\t""addc.cc.u32 %13, %44, 0;\n\t""addc.cc.u32 %14, %45, 0;\n\t""addc.cc.u32 %15, %46, 0;\n\t""addc.cc.u32 %16, %47, 0;\n\t""addc.cc.u32 %17, %48, 0;\n\t""addc.cc.u32 %18, %49, 0;\n\t""addc.cc.u32 %19, %50, 0;\n\t""addc.cc.u32 %20, %51, 0;\n\t""addc.cc.u32 %21, %52, 0;\n\t""addc.cc.u32 %22, %53, 0;\n\t""addc.cc.u32 %23, %54, 0;\n\t""addc.cc.u32 %24, %55, 0;\n\t""addc.cc.u32 %25, %56, 0;\n\t""addc.cc.u32 %26, %57, 0;\n\t""addc.cc.u32 %27, %58, 0;\n\t""addc.cc.u32 %28, %59, 0;\n\t""addc.cc.u32 %29, %60, 0;\n\t""addc.u32 %30, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[30], const Base a[30], const Base b[30]) { Base br; asm("sub.cc.u32 %0, %31, %61;\n\t""subc.cc.u32 %1, %32, %62;\n\t""subc.cc.u32 %2, %33, %63;\n\t""subc.cc.u32 %3, %34, %64;\n\t""subc.cc.u32 %4, %35, %65;\n\t""subc.cc.u32 %5, %36, %66;\n\t""subc.cc.u32 %6, %37, %67;\n\t""subc.cc.u32 %7, %38, %68;\n\t""subc.cc.u32 %8, %39, %69;\n\t""subc.cc.u32 %9, %40, %70;\n\t""subc.cc.u32 %10, %41, %71;\n\t""subc.cc.u32 %11, %42, %72;\n\t""subc.cc.u32 %12, %43, %73;\n\t""subc.cc.u32 %13, %44, %74;\n\t""subc.cc.u32 %14, %45, %75;\n\t""subc.cc.u32 %15, %46, %76;\n\t""subc.cc.u32 %16, %47, %77;\n\t""subc.cc.u32 %17, %48, %78;\n\t""subc.cc.u32 %18, %49, %79;\n\t""subc.cc.u32 %19, %50, %80;\n\t""subc.cc.u32 %20, %51, %81;\n\t""subc.cc.u32 %21, %52, %82;\n\t""subc.cc.u32 %22, %53, %83;\n\t""subc.cc.u32 %23, %54, %84;\n\t""subc.cc.u32 %24, %55, %85;\n\t""subc.cc.u32 %25, %56, %86;\n\t""subc.cc.u32 %26, %57, %87;\n\t""subc.cc.u32 %27, %58, %88;\n\t""subc.cc.u32 %28, %59, %89;\n\t""subc.cc.u32 %29, %60, %90;\n\t""subc.u32 %30, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[30], const Base a[30], Base b) { Base br; asm("sub.cc.u32 %0, %31, %61;\n\t""subc.cc.u32 %1, %32, 0;\n\t""subc.cc.u32 %2, %33, 0;\n\t""subc.cc.u32 %3, %34, 0;\n\t""subc.cc.u32 %4, %35, 0;\n\t""subc.cc.u32 %5, %36, 0;\n\t""subc.cc.u32 %6, %37, 0;\n\t""subc.cc.u32 %7, %38, 0;\n\t""subc.cc.u32 %8, %39, 0;\n\t""subc.cc.u32 %9, %40, 0;\n\t""subc.cc.u32 %10, %41, 0;\n\t""subc.cc.u32 %11, %42, 0;\n\t""subc.cc.u32 %12, %43, 0;\n\t""subc.cc.u32 %13, %44, 0;\n\t""subc.cc.u32 %14, %45, 0;\n\t""subc.cc.u32 %15, %46, 0;\n\t""subc.cc.u32 %16, %47, 0;\n\t""subc.cc.u32 %17, %48, 0;\n\t""subc.cc.u32 %18, %49, 0;\n\t""subc.cc.u32 %19, %50, 0;\n\t""subc.cc.u32 %20, %51, 0;\n\t""subc.cc.u32 %21, %52, 0;\n\t""subc.cc.u32 %22, %53, 0;\n\t""subc.cc.u32 %23, %54, 0;\n\t""subc.cc.u32 %24, %55, 0;\n\t""subc.cc.u32 %25, %56, 0;\n\t""subc.cc.u32 %26, %57, 0;\n\t""subc.cc.u32 %27, %58, 0;\n\t""subc.cc.u32 %28, %59, 0;\n\t""subc.cc.u32 %29, %60, 0;\n\t""subc.u32 %30, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 31> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[31], const Base a[31], const Base b[31]) { Base cy; asm("add.cc.u32 %0, %32, %63;\n\t""addc.cc.u32 %1, %33, %64;\n\t""addc.cc.u32 %2, %34, %65;\n\t""addc.cc.u32 %3, %35, %66;\n\t""addc.cc.u32 %4, %36, %67;\n\t""addc.cc.u32 %5, %37, %68;\n\t""addc.cc.u32 %6, %38, %69;\n\t""addc.cc.u32 %7, %39, %70;\n\t""addc.cc.u32 %8, %40, %71;\n\t""addc.cc.u32 %9, %41, %72;\n\t""addc.cc.u32 %10, %42, %73;\n\t""addc.cc.u32 %11, %43, %74;\n\t""addc.cc.u32 %12, %44, %75;\n\t""addc.cc.u32 %13, %45, %76;\n\t""addc.cc.u32 %14, %46, %77;\n\t""addc.cc.u32 %15, %47, %78;\n\t""addc.cc.u32 %16, %48, %79;\n\t""addc.cc.u32 %17, %49, %80;\n\t""addc.cc.u32 %18, %50, %81;\n\t""addc.cc.u32 %19, %51, %82;\n\t""addc.cc.u32 %20, %52, %83;\n\t""addc.cc.u32 %21, %53, %84;\n\t""addc.cc.u32 %22, %54, %85;\n\t""addc.cc.u32 %23, %55, %86;\n\t""addc.cc.u32 %24, %56, %87;\n\t""addc.cc.u32 %25, %57, %88;\n\t""addc.cc.u32 %26, %58, %89;\n\t""addc.cc.u32 %27, %59, %90;\n\t""addc.cc.u32 %28, %60, %91;\n\t""addc.cc.u32 %29, %61, %92;\n\t""addc.cc.u32 %30, %62, %93;\n\t""addc.u32 %31, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]),"r"(b[30]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[31], const Base a[31], Base b) { Base cy; asm("add.cc.u32 %0, %32, %63;\n\t""addc.cc.u32 %1, %33, 0;\n\t""addc.cc.u32 %2, %34, 0;\n\t""addc.cc.u32 %3, %35, 0;\n\t""addc.cc.u32 %4, %36, 0;\n\t""addc.cc.u32 %5, %37, 0;\n\t""addc.cc.u32 %6, %38, 0;\n\t""addc.cc.u32 %7, %39, 0;\n\t""addc.cc.u32 %8, %40, 0;\n\t""addc.cc.u32 %9, %41, 0;\n\t""addc.cc.u32 %10, %42, 0;\n\t""addc.cc.u32 %11, %43, 0;\n\t""addc.cc.u32 %12, %44, 0;\n\t""addc.cc.u32 %13, %45, 0;\n\t""addc.cc.u32 %14, %46, 0;\n\t""addc.cc.u32 %15, %47, 0;\n\t""addc.cc.u32 %16, %48, 0;\n\t""addc.cc.u32 %17, %49, 0;\n\t""addc.cc.u32 %18, %50, 0;\n\t""addc.cc.u32 %19, %51, 0;\n\t""addc.cc.u32 %20, %52, 0;\n\t""addc.cc.u32 %21, %53, 0;\n\t""addc.cc.u32 %22, %54, 0;\n\t""addc.cc.u32 %23, %55, 0;\n\t""addc.cc.u32 %24, %56, 0;\n\t""addc.cc.u32 %25, %57, 0;\n\t""addc.cc.u32 %26, %58, 0;\n\t""addc.cc.u32 %27, %59, 0;\n\t""addc.cc.u32 %28, %60, 0;\n\t""addc.cc.u32 %29, %61, 0;\n\t""addc.cc.u32 %30, %62, 0;\n\t""addc.u32 %31, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[31], const Base a[31], const Base b[31]) { Base br; asm("sub.cc.u32 %0, %32, %63;\n\t""subc.cc.u32 %1, %33, %64;\n\t""subc.cc.u32 %2, %34, %65;\n\t""subc.cc.u32 %3, %35, %66;\n\t""subc.cc.u32 %4, %36, %67;\n\t""subc.cc.u32 %5, %37, %68;\n\t""subc.cc.u32 %6, %38, %69;\n\t""subc.cc.u32 %7, %39, %70;\n\t""subc.cc.u32 %8, %40, %71;\n\t""subc.cc.u32 %9, %41, %72;\n\t""subc.cc.u32 %10, %42, %73;\n\t""subc.cc.u32 %11, %43, %74;\n\t""subc.cc.u32 %12, %44, %75;\n\t""subc.cc.u32 %13, %45, %76;\n\t""subc.cc.u32 %14, %46, %77;\n\t""subc.cc.u32 %15, %47, %78;\n\t""subc.cc.u32 %16, %48, %79;\n\t""subc.cc.u32 %17, %49, %80;\n\t""subc.cc.u32 %18, %50, %81;\n\t""subc.cc.u32 %19, %51, %82;\n\t""subc.cc.u32 %20, %52, %83;\n\t""subc.cc.u32 %21, %53, %84;\n\t""subc.cc.u32 %22, %54, %85;\n\t""subc.cc.u32 %23, %55, %86;\n\t""subc.cc.u32 %24, %56, %87;\n\t""subc.cc.u32 %25, %57, %88;\n\t""subc.cc.u32 %26, %58, %89;\n\t""subc.cc.u32 %27, %59, %90;\n\t""subc.cc.u32 %28, %60, %91;\n\t""subc.cc.u32 %29, %61, %92;\n\t""subc.cc.u32 %30, %62, %93;\n\t""subc.u32 %31, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]),"r"(b[30]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[31], const Base a[31], Base b) { Base br; asm("sub.cc.u32 %0, %32, %63;\n\t""subc.cc.u32 %1, %33, 0;\n\t""subc.cc.u32 %2, %34, 0;\n\t""subc.cc.u32 %3, %35, 0;\n\t""subc.cc.u32 %4, %36, 0;\n\t""subc.cc.u32 %5, %37, 0;\n\t""subc.cc.u32 %6, %38, 0;\n\t""subc.cc.u32 %7, %39, 0;\n\t""subc.cc.u32 %8, %40, 0;\n\t""subc.cc.u32 %9, %41, 0;\n\t""subc.cc.u32 %10, %42, 0;\n\t""subc.cc.u32 %11, %43, 0;\n\t""subc.cc.u32 %12, %44, 0;\n\t""subc.cc.u32 %13, %45, 0;\n\t""subc.cc.u32 %14, %46, 0;\n\t""subc.cc.u32 %15, %47, 0;\n\t""subc.cc.u32 %16, %48, 0;\n\t""subc.cc.u32 %17, %49, 0;\n\t""subc.cc.u32 %18, %50, 0;\n\t""subc.cc.u32 %19, %51, 0;\n\t""subc.cc.u32 %20, %52, 0;\n\t""subc.cc.u32 %21, %53, 0;\n\t""subc.cc.u32 %22, %54, 0;\n\t""subc.cc.u32 %23, %55, 0;\n\t""subc.cc.u32 %24, %56, 0;\n\t""subc.cc.u32 %25, %57, 0;\n\t""subc.cc.u32 %26, %58, 0;\n\t""subc.cc.u32 %27, %59, 0;\n\t""subc.cc.u32 %28, %60, 0;\n\t""subc.cc.u32 %29, %61, 0;\n\t""subc.cc.u32 %30, %62, 0;\n\t""subc.u32 %31, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(b));; return br; }
 };
template <> struct CC<DigitT<u32, 32>, 32> { using Base = typename DigitT<u32, 32>::Base; __device__ __forceinline__ static Base add_cy(Base c[32], const Base a[32], const Base b[32]) { Base cy; asm("add.cc.u32 %0, %33, %65;\n\t""addc.cc.u32 %1, %34, %66;\n\t""addc.cc.u32 %2, %35, %67;\n\t""addc.cc.u32 %3, %36, %68;\n\t""addc.cc.u32 %4, %37, %69;\n\t""addc.cc.u32 %5, %38, %70;\n\t""addc.cc.u32 %6, %39, %71;\n\t""addc.cc.u32 %7, %40, %72;\n\t""addc.cc.u32 %8, %41, %73;\n\t""addc.cc.u32 %9, %42, %74;\n\t""addc.cc.u32 %10, %43, %75;\n\t""addc.cc.u32 %11, %44, %76;\n\t""addc.cc.u32 %12, %45, %77;\n\t""addc.cc.u32 %13, %46, %78;\n\t""addc.cc.u32 %14, %47, %79;\n\t""addc.cc.u32 %15, %48, %80;\n\t""addc.cc.u32 %16, %49, %81;\n\t""addc.cc.u32 %17, %50, %82;\n\t""addc.cc.u32 %18, %51, %83;\n\t""addc.cc.u32 %19, %52, %84;\n\t""addc.cc.u32 %20, %53, %85;\n\t""addc.cc.u32 %21, %54, %86;\n\t""addc.cc.u32 %22, %55, %87;\n\t""addc.cc.u32 %23, %56, %88;\n\t""addc.cc.u32 %24, %57, %89;\n\t""addc.cc.u32 %25, %58, %90;\n\t""addc.cc.u32 %26, %59, %91;\n\t""addc.cc.u32 %27, %60, %92;\n\t""addc.cc.u32 %28, %61, %93;\n\t""addc.cc.u32 %29, %62, %94;\n\t""addc.cc.u32 %30, %63, %95;\n\t""addc.cc.u32 %31, %64, %96;\n\t""addc.u32 %32, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(c[31]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(a[31]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]),"r"(b[30]),"r"(b[31]));; return cy; }
__device__ __forceinline__ static Base add_cy(Base c[32], const Base a[32], Base b) { Base cy; asm("add.cc.u32 %0, %33, %65;\n\t""addc.cc.u32 %1, %34, 0;\n\t""addc.cc.u32 %2, %35, 0;\n\t""addc.cc.u32 %3, %36, 0;\n\t""addc.cc.u32 %4, %37, 0;\n\t""addc.cc.u32 %5, %38, 0;\n\t""addc.cc.u32 %6, %39, 0;\n\t""addc.cc.u32 %7, %40, 0;\n\t""addc.cc.u32 %8, %41, 0;\n\t""addc.cc.u32 %9, %42, 0;\n\t""addc.cc.u32 %10, %43, 0;\n\t""addc.cc.u32 %11, %44, 0;\n\t""addc.cc.u32 %12, %45, 0;\n\t""addc.cc.u32 %13, %46, 0;\n\t""addc.cc.u32 %14, %47, 0;\n\t""addc.cc.u32 %15, %48, 0;\n\t""addc.cc.u32 %16, %49, 0;\n\t""addc.cc.u32 %17, %50, 0;\n\t""addc.cc.u32 %18, %51, 0;\n\t""addc.cc.u32 %19, %52, 0;\n\t""addc.cc.u32 %20, %53, 0;\n\t""addc.cc.u32 %21, %54, 0;\n\t""addc.cc.u32 %22, %55, 0;\n\t""addc.cc.u32 %23, %56, 0;\n\t""addc.cc.u32 %24, %57, 0;\n\t""addc.cc.u32 %25, %58, 0;\n\t""addc.cc.u32 %26, %59, 0;\n\t""addc.cc.u32 %27, %60, 0;\n\t""addc.cc.u32 %28, %61, 0;\n\t""addc.cc.u32 %29, %62, 0;\n\t""addc.cc.u32 %30, %63, 0;\n\t""addc.cc.u32 %31, %64, 0;\n\t""addc.u32 %32, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(c[31]),"=r"(cy) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(a[31]),"r"(b));; return cy; }
__device__ __forceinline__ static Base sub_br(Base c[32], const Base a[32], const Base b[32]) { Base br; asm("sub.cc.u32 %0, %33, %65;\n\t""subc.cc.u32 %1, %34, %66;\n\t""subc.cc.u32 %2, %35, %67;\n\t""subc.cc.u32 %3, %36, %68;\n\t""subc.cc.u32 %4, %37, %69;\n\t""subc.cc.u32 %5, %38, %70;\n\t""subc.cc.u32 %6, %39, %71;\n\t""subc.cc.u32 %7, %40, %72;\n\t""subc.cc.u32 %8, %41, %73;\n\t""subc.cc.u32 %9, %42, %74;\n\t""subc.cc.u32 %10, %43, %75;\n\t""subc.cc.u32 %11, %44, %76;\n\t""subc.cc.u32 %12, %45, %77;\n\t""subc.cc.u32 %13, %46, %78;\n\t""subc.cc.u32 %14, %47, %79;\n\t""subc.cc.u32 %15, %48, %80;\n\t""subc.cc.u32 %16, %49, %81;\n\t""subc.cc.u32 %17, %50, %82;\n\t""subc.cc.u32 %18, %51, %83;\n\t""subc.cc.u32 %19, %52, %84;\n\t""subc.cc.u32 %20, %53, %85;\n\t""subc.cc.u32 %21, %54, %86;\n\t""subc.cc.u32 %22, %55, %87;\n\t""subc.cc.u32 %23, %56, %88;\n\t""subc.cc.u32 %24, %57, %89;\n\t""subc.cc.u32 %25, %58, %90;\n\t""subc.cc.u32 %26, %59, %91;\n\t""subc.cc.u32 %27, %60, %92;\n\t""subc.cc.u32 %28, %61, %93;\n\t""subc.cc.u32 %29, %62, %94;\n\t""subc.cc.u32 %30, %63, %95;\n\t""subc.cc.u32 %31, %64, %96;\n\t""subc.u32 %32, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(c[31]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(a[31]),"r"(b[0]),"r"(b[1]),"r"(b[2]),"r"(b[3]),"r"(b[4]),"r"(b[5]),"r"(b[6]),"r"(b[7]),"r"(b[8]),"r"(b[9]),"r"(b[10]),"r"(b[11]),"r"(b[12]),"r"(b[13]),"r"(b[14]),"r"(b[15]),"r"(b[16]),"r"(b[17]),"r"(b[18]),"r"(b[19]),"r"(b[20]),"r"(b[21]),"r"(b[22]),"r"(b[23]),"r"(b[24]),"r"(b[25]),"r"(b[26]),"r"(b[27]),"r"(b[28]),"r"(b[29]),"r"(b[30]),"r"(b[31]));; return br; }
__device__ __forceinline__ static Base sub_br(Base c[32], const Base a[32], Base b) { Base br; asm("sub.cc.u32 %0, %33, %65;\n\t""subc.cc.u32 %1, %34, 0;\n\t""subc.cc.u32 %2, %35, 0;\n\t""subc.cc.u32 %3, %36, 0;\n\t""subc.cc.u32 %4, %37, 0;\n\t""subc.cc.u32 %5, %38, 0;\n\t""subc.cc.u32 %6, %39, 0;\n\t""subc.cc.u32 %7, %40, 0;\n\t""subc.cc.u32 %8, %41, 0;\n\t""subc.cc.u32 %9, %42, 0;\n\t""subc.cc.u32 %10, %43, 0;\n\t""subc.cc.u32 %11, %44, 0;\n\t""subc.cc.u32 %12, %45, 0;\n\t""subc.cc.u32 %13, %46, 0;\n\t""subc.cc.u32 %14, %47, 0;\n\t""subc.cc.u32 %15, %48, 0;\n\t""subc.cc.u32 %16, %49, 0;\n\t""subc.cc.u32 %17, %50, 0;\n\t""subc.cc.u32 %18, %51, 0;\n\t""subc.cc.u32 %19, %52, 0;\n\t""subc.cc.u32 %20, %53, 0;\n\t""subc.cc.u32 %21, %54, 0;\n\t""subc.cc.u32 %22, %55, 0;\n\t""subc.cc.u32 %23, %56, 0;\n\t""subc.cc.u32 %24, %57, 0;\n\t""subc.cc.u32 %25, %58, 0;\n\t""subc.cc.u32 %26, %59, 0;\n\t""subc.cc.u32 %27, %60, 0;\n\t""subc.cc.u32 %28, %61, 0;\n\t""subc.cc.u32 %29, %62, 0;\n\t""subc.cc.u32 %30, %63, 0;\n\t""subc.cc.u32 %31, %64, 0;\n\t""subc.u32 %32, 0, 0;" : "=r"(c[0]),"=r"(c[1]),"=r"(c[2]),"=r"(c[3]),"=r"(c[4]),"=r"(c[5]),"=r"(c[6]),"=r"(c[7]),"=r"(c[8]),"=r"(c[9]),"=r"(c[10]),"=r"(c[11]),"=r"(c[12]),"=r"(c[13]),"=r"(c[14]),"=r"(c[15]),"=r"(c[16]),"=r"(c[17]),"=r"(c[18]),"=r"(c[19]),"=r"(c[20]),"=r"(c[21]),"=r"(c[22]),"=r"(c[23]),"=r"(c[24]),"=r"(c[25]),"=r"(c[26]),"=r"(c[27]),"=r"(c[28]),"=r"(c[29]),"=r"(c[30]),"=r"(c[31]),"=r"(br) : "r"(a[0]),"r"(a[1]),"r"(a[2]),"r"(a[3]),"r"(a[4]),"r"(a[5]),"r"(a[6]),"r"(a[7]),"r"(a[8]),"r"(a[9]),"r"(a[10]),"r"(a[11]),"r"(a[12]),"r"(a[13]),"r"(a[14]),"r"(a[15]),"r"(a[16]),"r"(a[17]),"r"(a[18]),"r"(a[19]),"r"(a[20]),"r"(a[21]),"r"(a[22]),"r"(a[23]),"r"(a[24]),"r"(a[25]),"r"(a[26]),"r"(a[27]),"r"(a[28]),"r"(a[29]),"r"(a[30]),"r"(a[31]),"r"(b));; return br; }
 };
